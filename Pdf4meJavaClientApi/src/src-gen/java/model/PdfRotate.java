/*
 * Pdf4me
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * PdfRotate
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-07-02T11:08:16.145Z")
public class PdfRotate {
  @SerializedName("pageNr")
  private Integer pageNr = null;

  /**
   * Gets or Sets rotationType
   */
  @JsonAdapter(RotationTypeEnum.Adapter.class)
  public enum RotationTypeEnum {
    NOROTATION("noRotation"),

    CLOCKWISE("clockwise"),

    COUNTERCLOCKWISE("counterClockwise"),

    UPSIDEDOWN("upsideDown");

    private String value;

    RotationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RotationTypeEnum fromValue(String text) {
      for (RotationTypeEnum b : RotationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RotationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RotationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RotationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RotationTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("rotationType")
  private RotationTypeEnum rotationType = null;

  public PdfRotate pageNr(Integer pageNr) {
    this.pageNr = pageNr;
    return this;
  }

  /**
   * Get pageNr
   * 
   * @return pageNr
   **/
  @ApiModelProperty(value = "")
  public Integer getPageNr() {
    return pageNr;
  }

  public void setPageNr(Integer pageNr) {
    this.pageNr = pageNr;
  }

  public PdfRotate rotationType(RotationTypeEnum rotationType) {
    this.rotationType = rotationType;
    return this;
  }

  /**
   * Get rotationType
   * 
   * @return rotationType
   **/
  @ApiModelProperty(value = "")
  public RotationTypeEnum getRotationType() {
    return rotationType;
  }

  public void setRotationType(RotationTypeEnum rotationType) {
    this.rotationType = rotationType;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfRotate pdfRotate = (PdfRotate) o;
    return Objects.equals(this.pageNr, pdfRotate.pageNr) && Objects.equals(this.rotationType, pdfRotate.rotationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageNr, rotationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfRotate {\n");

    sb.append("    pageNr: ").append(toIndentedString(pageNr)).append("\n");
    sb.append("    rotationType: ").append(toIndentedString(rotationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

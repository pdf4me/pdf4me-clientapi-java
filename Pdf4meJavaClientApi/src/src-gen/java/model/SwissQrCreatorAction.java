/*
 * Pdf4me
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import model.BillingData;
import java.io.IOException;
import java.util.UUID;

/**
 * SwissQrCreatorAction
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-07-02T11:08:16.145Z")
public class SwissQrCreatorAction {
  @SerializedName("billingData")
  private BillingData billingData = null;

  /**
   * Gets or Sets languageType
   */
  @JsonAdapter(LanguageTypeEnum.Adapter.class)
  public enum LanguageTypeEnum {
    GERMAN("german"),

    FRENCH("french"),

    ITALIAN("italian"),

    ENGLISH("english");

    private String value;

    LanguageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageTypeEnum fromValue(String text) {
      for (LanguageTypeEnum b : LanguageTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LanguageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LanguageTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("languageType")
  private LanguageTypeEnum languageType = null;

  /**
   * Gets or Sets seperatorLine
   */
  @JsonAdapter(SeperatorLineEnum.Adapter.class)
  public enum SeperatorLineEnum {
    LINEWITHSCISSOR("lineWithScissor"),

    LINE("line"),

    NONE("none");

    private String value;

    SeperatorLineEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeperatorLineEnum fromValue(String text) {
      for (SeperatorLineEnum b : SeperatorLineEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SeperatorLineEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeperatorLineEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeperatorLineEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SeperatorLineEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("seperatorLine")
  private SeperatorLineEnum seperatorLine = null;

  /**
   * Gets or Sets formatType
   */
  @JsonAdapter(FormatTypeEnum.Adapter.class)
  public enum FormatTypeEnum {
    TIFF("tiff"),

    PDF("pDF"),

    SVG("sVG"),

    PNG("pNG"),

    JPEG("jPEG");

    private String value;

    FormatTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatTypeEnum fromValue(String text) {
      for (FormatTypeEnum b : FormatTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FormatTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FormatTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("formatType")
  private FormatTypeEnum formatType = null;

  @SerializedName("swissQrOnPdfRequired")
  private Boolean swissQrOnPdfRequired = null;

  @SerializedName("actionId")
  private UUID actionId = null;

  public SwissQrCreatorAction billingData(BillingData billingData) {
    this.billingData = billingData;
    return this;
  }

  /**
   * Get billingData
   * 
   * @return billingData
   **/
  @ApiModelProperty(value = "")
  public BillingData getBillingData() {
    return billingData;
  }

  public void setBillingData(BillingData billingData) {
    this.billingData = billingData;
  }

  public SwissQrCreatorAction languageType(LanguageTypeEnum languageType) {
    this.languageType = languageType;
    return this;
  }

  /**
   * Get languageType
   * 
   * @return languageType
   **/
  @ApiModelProperty(value = "")
  public LanguageTypeEnum getLanguageType() {
    return languageType;
  }

  public void setLanguageType(LanguageTypeEnum languageType) {
    this.languageType = languageType;
  }

  public SwissQrCreatorAction seperatorLine(SeperatorLineEnum seperatorLine) {
    this.seperatorLine = seperatorLine;
    return this;
  }

  /**
   * Get seperatorLine
   * 
   * @return seperatorLine
   **/
  @ApiModelProperty(value = "")
  public SeperatorLineEnum getSeperatorLine() {
    return seperatorLine;
  }

  public void setSeperatorLine(SeperatorLineEnum seperatorLine) {
    this.seperatorLine = seperatorLine;
  }

  public SwissQrCreatorAction formatType(FormatTypeEnum formatType) {
    this.formatType = formatType;
    return this;
  }

  /**
   * Get formatType
   * 
   * @return formatType
   **/
  @ApiModelProperty(value = "")
  public FormatTypeEnum getFormatType() {
    return formatType;
  }

  public void setFormatType(FormatTypeEnum formatType) {
    this.formatType = formatType;
  }

  public SwissQrCreatorAction swissQrOnPdfRequired(Boolean swissQrOnPdfRequired) {
    this.swissQrOnPdfRequired = swissQrOnPdfRequired;
    return this;
  }

  /**
   * Get swissQrOnPdfRequired
   * 
   * @return swissQrOnPdfRequired
   **/
  @ApiModelProperty(value = "")
  public Boolean isSwissQrOnPdfRequired() {
    return swissQrOnPdfRequired;
  }

  public void setSwissQrOnPdfRequired(Boolean swissQrOnPdfRequired) {
    this.swissQrOnPdfRequired = swissQrOnPdfRequired;
  }

  public SwissQrCreatorAction actionId(UUID actionId) {
    this.actionId = actionId;
    return this;
  }

  /**
   * Get actionId
   * 
   * @return actionId
   **/
  @ApiModelProperty(value = "")
  public UUID getActionId() {
    return actionId;
  }

  public void setActionId(UUID actionId) {
    this.actionId = actionId;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SwissQrCreatorAction swissQrCreatorAction = (SwissQrCreatorAction) o;
    return Objects.equals(this.billingData, swissQrCreatorAction.billingData)
        && Objects.equals(this.languageType, swissQrCreatorAction.languageType)
        && Objects.equals(this.seperatorLine, swissQrCreatorAction.seperatorLine)
        && Objects.equals(this.formatType, swissQrCreatorAction.formatType)
        && Objects.equals(this.swissQrOnPdfRequired, swissQrCreatorAction.swissQrOnPdfRequired)
        && Objects.equals(this.actionId, swissQrCreatorAction.actionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingData, languageType, seperatorLine, formatType, swissQrOnPdfRequired, actionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SwissQrCreatorAction {\n");

    sb.append("    billingData: ").append(toIndentedString(billingData)).append("\n");
    sb.append("    languageType: ").append(toIndentedString(languageType)).append("\n");
    sb.append("    seperatorLine: ").append(toIndentedString(seperatorLine)).append("\n");
    sb.append("    formatType: ").append(toIndentedString(formatType)).append("\n");
    sb.append("    swissQrOnPdfRequired: ").append(toIndentedString(swissQrOnPdfRequired)).append("\n");
    sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

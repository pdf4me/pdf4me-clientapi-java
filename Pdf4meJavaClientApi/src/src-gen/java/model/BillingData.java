/*
 * Pdf4me
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * BillingData
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-07-02T11:08:16.145Z")
public class BillingData {
  /**
   * Gets or Sets qrType
   */
  @JsonAdapter(QrTypeEnum.Adapter.class)
  public enum QrTypeEnum {
    SPC("sPC");

    private String value;

    QrTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QrTypeEnum fromValue(String text) {
      for (QrTypeEnum b : QrTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<QrTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QrTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QrTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return QrTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("qrType")
  private QrTypeEnum qrType = null;

  /**
   * Gets or Sets version
   */
  @JsonAdapter(VersionEnum.Adapter.class)
  public enum VersionEnum {
    V20("v20");

    private String value;

    VersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VersionEnum fromValue(String text) {
      for (VersionEnum b : VersionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<VersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VersionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return VersionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("version")
  private VersionEnum version = null;

  /**
   * Gets or Sets codingType
   */
  @JsonAdapter(CodingTypeEnum.Adapter.class)
  public enum CodingTypeEnum {
    DEFAULT("default"),

    UTF8("uTF8");

    private String value;

    CodingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodingTypeEnum fromValue(String text) {
      for (CodingTypeEnum b : CodingTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CodingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CodingTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("codingType")
  private CodingTypeEnum codingType = null;

  @SerializedName("iban")
  private String iban = null;

  /**
   * Gets or Sets crAddressType
   */
  @JsonAdapter(CrAddressTypeEnum.Adapter.class)
  public enum CrAddressTypeEnum {
    S("s"),

    K("k");

    private String value;

    CrAddressTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CrAddressTypeEnum fromValue(String text) {
      for (CrAddressTypeEnum b : CrAddressTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CrAddressTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CrAddressTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CrAddressTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CrAddressTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("cr_AddressType")
  private CrAddressTypeEnum crAddressType = null;

  @SerializedName("cr_Name")
  private String crName = null;

  @SerializedName("cr_StreetOrAddressLine1")
  private String crStreetOrAddressLine1 = null;

  @SerializedName("cr_BuildNoOrAddressLine2")
  private String crBuildNoOrAddressLine2 = null;

  @SerializedName("cr_PostalCode")
  private String crPostalCode = null;

  @SerializedName("cr_City")
  private String crCity = null;

  /**
   * Gets or Sets crCountry
   */
  @JsonAdapter(CrCountryEnum.Adapter.class)
  public enum CrCountryEnum {
    ANDORRA("andorra"),

    UNITEDARABEMIRATES("unitedArabEmirates"),

    AFGHANISTAN("afghanistan"),

    ANTIGUAANDBARBUDA("antiguaandBarbuda"),

    ANGUILLA("anguilla"),

    ALBANIA("albania"),

    ARMENIA("armenia"),

    ANGOLA("angola"),

    ANTARCTICA("antarctica"),

    ARGENTINA("argentina"),

    AMERICANSAMOA("americanSamoa"),

    AUSTRIA("austria"),

    AUSTRALIA("australia"),

    ARUBA("aruba"),

    _LANDISLANDS("ålandIslands"),

    AZERBAIJAN("azerbaijan"),

    BOSNIAANDHERZEGOVINA("bosniaandHerzegovina"),

    BARBADOS("barbados"),

    BANGLADESH("bangladesh"),

    BELGIUM("belgium"),

    BURKINAFASO("burkinaFaso"),

    BULGARIA("bulgaria"),

    BAHRAIN("bahrain"),

    BURUNDI("burundi"),

    BENIN("benin"),

    SAINTBARTH_LEMY("saintBarthélemy"),

    BERMUDA("bermuda"),

    BRUNEIDARUSSALAM("bruneiDarussalam"),

    BOLIVIAPLURINATIONALSTATEOF("boliviaPlurinationalStateof"),

    BONAIRESINTEUSTATIUSANDSABA("bonaireSintEustatiusandSaba"),

    BRAZIL("brazil"),

    BAHAMAS("bahamas"),

    BHUTAN("bhutan"),

    BOUVETISLAND("bouvetIsland"),

    BOTSWANA("botswana"),

    BELARUS("belarus"),

    BELIZE("belize"),

    CANADA("canada"),

    COCOSKEELINGISLANDS("cocosKeelingIslands"),

    CONGODEMOCRATICREPUBLICOFTHE("congoDemocraticRepublicofthe"),

    CENTRALAFRICANREPUBLIC("centralAfricanRepublic"),

    CONGO("congo"),

    SWITZERLAND("switzerland"),

    C_TEDIVOIRE("côtedIvoire"),

    COOKISLANDS("cookIslands"),

    CHILE("chile"),

    CAMEROON("cameroon"),

    CHINA("china"),

    COLOMBIA("colombia"),

    COSTARICA("costaRica"),

    CUBA("cuba"),

    CABOVERDE("caboVerde"),

    CURA_AO("curaçao"),

    CHRISTMASISLAND("christmasIsland"),

    CYPRUS("cyprus"),

    CZECHIA("czechia"),

    GERMANY("germany"),

    DJIBOUTI("djibouti"),

    DENMARK("denmark"),

    DOMINICA("dominica"),

    DOMINICANREPUBLIC("dominicanRepublic"),

    ALGERIA("algeria"),

    ECUADOR("ecuador"),

    ESTONIA("estonia"),

    EGYPT("egypt"),

    WESTERNSAHARA("westernSahara"),

    ERITREA("eritrea"),

    SPAIN("spain"),

    ETHIOPIA("ethiopia"),

    FINLAND("finland"),

    FIJI("fiji"),

    FALKLANDISLANDSMALVINAS("falklandIslandsMalvinas"),

    MICRONESIAFEDERATEDSTATESOF("micronesiaFederatedStatesof"),

    FAROEISLANDS("faroeIslands"),

    FRANCE("france"),

    GABON("gabon"),

    UNITEDKINGDOMOFGREATBRITAINANDNORTHERNIRELAND("unitedKingdomofGreatBritainandNorthernIreland"),

    GRENADA("grenada"),

    GEORGIA("georgia"),

    FRENCHGUIANA("frenchGuiana"),

    GUERNSEY("guernsey"),

    GHANA("ghana"),

    GIBRALTAR("gibraltar"),

    GREENLAND("greenland"),

    GAMBIA("gambia"),

    GUINEA("guinea"),

    GUADELOUPE("guadeloupe"),

    EQUATORIALGUINEA("equatorialGuinea"),

    GREECE("greece"),

    SOUTHGEORGIAANDTHESOUTHSANDWICHISLANDS("southGeorgiaandtheSouthSandwichIslands"),

    GUATEMALA("guatemala"),

    GUAM("guam"),

    GUINEABISSAU("guineaBissau"),

    GUYANA("guyana"),

    HONGKONG("hongKong"),

    HEARDISLANDANDMCDONALDISLANDS("heardIslandandMcDonaldIslands"),

    HONDURAS("honduras"),

    CROATIA("croatia"),

    HAITI("haiti"),

    HUNGARY("hungary"),

    INDONESIA("indonesia"),

    IRELAND("ireland"),

    ISRAEL("israel"),

    ISLEOFMAN("isleofMan"),

    INDIA("india"),

    BRITISHINDIANOCEANTERRITORY("britishIndianOceanTerritory"),

    IRAQ("iraq"),

    IRANISLAMICREPUBLICOF("iranIslamicRepublicof"),

    ICELAND("iceland"),

    ITALY("italy"),

    JERSEY("jersey"),

    JAMAICA("jamaica"),

    JORDAN("jordan"),

    JAPAN("japan"),

    KENYA("kenya"),

    KYRGYZSTAN("kyrgyzstan"),

    CAMBODIA("cambodia"),

    KIRIBATI("kiribati"),

    COMOROS("comoros"),

    SAINTKITTSANDNEVIS("saintKittsandNevis"),

    KOREADEMOCRATICPEOPLESREPUBLICOF("koreaDemocraticPeoplesRepublicof"),

    KOREAREPUBLICOF("koreaRepublicof"),

    KUWAIT("kuwait"),

    CAYMANISLANDS("caymanIslands"),

    KAZAKHSTAN("kazakhstan"),

    LAOPEOPLESDEMOCRATICREPUBLIC("laoPeoplesDemocraticRepublic"),

    LEBANON("lebanon"),

    SAINTLUCIA("saintLucia"),

    LIECHTENSTEIN("liechtenstein"),

    SRILANKA("sriLanka"),

    LIBERIA("liberia"),

    LESOTHO("lesotho"),

    LITHUANIA("lithuania"),

    LUXEMBOURG("luxembourg"),

    LATVIA("latvia"),

    LIBYA("libya"),

    MOROCCO("morocco"),

    MONACO("monaco"),

    MOLDOVAREPUBLICOF("moldovaRepublicof"),

    MONTENEGRO("montenegro"),

    SAINTMARTINFRENCHPART("saintMartinFrenchpart"),

    MADAGASCAR("madagascar"),

    MARSHALLISLANDS("marshallIslands"),

    NORTHMACEDONIA("northMacedonia"),

    MALI("mali"),

    MYANMAR("myanmar"),

    MONGOLIA("mongolia"),

    MACAO("macao"),

    NORTHERNMARIANAISLANDS("northernMarianaIslands"),

    MARTINIQUE("martinique"),

    MAURITANIA("mauritania"),

    MONTSERRAT("montserrat"),

    MALTA("malta"),

    MAURITIUS("mauritius"),

    MALDIVES("maldives"),

    MALAWI("malawi"),

    MEXICO("mexico"),

    MALAYSIA("malaysia"),

    MOZAMBIQUE("mozambique"),

    NAMIBIA("namibia"),

    NEWCALEDONIA("newCaledonia"),

    NIGER("niger"),

    NORFOLKISLAND("norfolkIsland"),

    NIGERIA("nigeria"),

    NICARAGUA("nicaragua"),

    NETHERLANDS("netherlands"),

    NORWAY("norway"),

    NEPAL("nepal"),

    NAURU("nauru"),

    NIUE("niue"),

    NEWZEALAND("newZealand"),

    OMAN("oman"),

    PANAMA("panama"),

    PERU("peru"),

    FRENCHPOLYNESIA("frenchPolynesia"),

    PAPUANEWGUINEA("papuaNewGuinea"),

    PHILIPPINES("philippines"),

    PAKISTAN("pakistan"),

    POLAND("poland"),

    SAINTPIERREANDMIQUELON("saintPierreandMiquelon"),

    PITCAIRN("pitcairn"),

    PUERTORICO("puertoRico"),

    PALESTINESTATEOF("palestineStateof"),

    PORTUGAL("portugal"),

    PALAU("palau"),

    PARAGUAY("paraguay"),

    QATAR("qatar"),

    R_UNION("réunion"),

    ROMANIA("romania"),

    SERBIA("serbia"),

    RUSSIANFEDERATION("russianFederation"),

    RWANDA("rwanda"),

    SAUDIARABIA("saudiArabia"),

    SOLOMONISLANDS("solomonIslands"),

    SEYCHELLES("seychelles"),

    SUDAN("sudan"),

    SWEDEN("sweden"),

    SINGAPORE("singapore"),

    SAINTHELENAASCENSIONANDTRISTANDACUNHA("saintHelenaAscensionandTristandaCunha"),

    SLOVENIA("slovenia"),

    SVALBARDANDJANMAYEN("svalbardandJanMayen"),

    SLOVAKIA("slovakia"),

    SIERRALEONE("sierraLeone"),

    SANMARINO("sanMarino"),

    SENEGAL("senegal"),

    SOMALIA("somalia"),

    SURINAME("suriname"),

    SOUTHSUDAN("southSudan"),

    SAOTOMEANDPRINCIPE("saoTomeandPrincipe"),

    ELSALVADOR("elSalvador"),

    SINTMAARTENDUTCHPART("sintMaartenDutchpart"),

    SYRIANARABREPUBLIC("syrianArabRepublic"),

    ESWATINI("eswatini"),

    TURKSANDCAICOSISLANDS("turksandCaicosIslands"),

    CHAD("chad"),

    FRENCHSOUTHERNTERRITORIES("frenchSouthernTerritories"),

    TOGO("togo"),

    THAILAND("thailand"),

    TAJIKISTAN("tajikistan"),

    TOKELAU("tokelau"),

    TIMORLESTE("timorLeste"),

    TURKMENISTAN("turkmenistan"),

    TUNISIA("tunisia"),

    TONGA("tonga"),

    TURKEY("turkey"),

    TRINIDADANDTOBAGO("trinidadandTobago"),

    TUVALU("tuvalu"),

    TAIWANPROVINCEOFCHINA("taiwanProvinceofChina"),

    TANZANIAUNITEDREPUBLICOF("tanzaniaUnitedRepublicof"),

    UKRAINE("ukraine"),

    UGANDA("uganda"),

    UNITEDSTATESMINOROUTLYINGISLANDS("unitedStatesMinorOutlyingIslands"),

    UNITEDSTATESOFAMERICA("unitedStatesofAmerica"),

    URUGUAY("uruguay"),

    UZBEKISTAN("uzbekistan"),

    HOLYSEE("holySee"),

    SAINTVINCENTANDTHEGRENADINES("saintVincentandtheGrenadines"),

    VENEZUELABOLIVARIANREPUBLICOF("venezuelaBolivarianRepublicof"),

    VIRGINISLANDSBRITISH("virginIslandsBritish"),

    VIRGINISLANDSUS("virginIslandsUS"),

    VIETNAM("vietNam"),

    VANUATU("vanuatu"),

    WALLISANDFUTUNA("wallisandFutuna"),

    SAMOA("samoa"),

    YEMEN("yemen"),

    MAYOTTE("mayotte"),

    SOUTHAFRICA("southAfrica"),

    ZAMBIA("zambia"),

    ZIMBABWE("zimbabwe");

    private String value;

    CrCountryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CrCountryEnum fromValue(String text) {
      for (CrCountryEnum b : CrCountryEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CrCountryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CrCountryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CrCountryEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CrCountryEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("cr_Country")
  private CrCountryEnum crCountry = null;

  /**
   * Gets or Sets ucrAddressType
   */
  @JsonAdapter(UcrAddressTypeEnum.Adapter.class)
  public enum UcrAddressTypeEnum {
    S("s"),

    K("k");

    private String value;

    UcrAddressTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UcrAddressTypeEnum fromValue(String text) {
      for (UcrAddressTypeEnum b : UcrAddressTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<UcrAddressTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UcrAddressTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UcrAddressTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return UcrAddressTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ucr_AddressType")
  private UcrAddressTypeEnum ucrAddressType = null;

  @SerializedName("ucr_Name")
  private String ucrName = null;

  @SerializedName("ucr_StreetOrAddressLine1")
  private String ucrStreetOrAddressLine1 = null;

  @SerializedName("ucr_BuildNoOrAddressLine2")
  private String ucrBuildNoOrAddressLine2 = null;

  @SerializedName("ucr_PostalCode")
  private String ucrPostalCode = null;

  @SerializedName("ucr_City")
  private String ucrCity = null;

  /**
   * Gets or Sets ucrCountry
   */
  @JsonAdapter(UcrCountryEnum.Adapter.class)
  public enum UcrCountryEnum {
    ANDORRA("andorra"),

    UNITEDARABEMIRATES("unitedArabEmirates"),

    AFGHANISTAN("afghanistan"),

    ANTIGUAANDBARBUDA("antiguaandBarbuda"),

    ANGUILLA("anguilla"),

    ALBANIA("albania"),

    ARMENIA("armenia"),

    ANGOLA("angola"),

    ANTARCTICA("antarctica"),

    ARGENTINA("argentina"),

    AMERICANSAMOA("americanSamoa"),

    AUSTRIA("austria"),

    AUSTRALIA("australia"),

    ARUBA("aruba"),

    _LANDISLANDS("ålandIslands"),

    AZERBAIJAN("azerbaijan"),

    BOSNIAANDHERZEGOVINA("bosniaandHerzegovina"),

    BARBADOS("barbados"),

    BANGLADESH("bangladesh"),

    BELGIUM("belgium"),

    BURKINAFASO("burkinaFaso"),

    BULGARIA("bulgaria"),

    BAHRAIN("bahrain"),

    BURUNDI("burundi"),

    BENIN("benin"),

    SAINTBARTH_LEMY("saintBarthélemy"),

    BERMUDA("bermuda"),

    BRUNEIDARUSSALAM("bruneiDarussalam"),

    BOLIVIAPLURINATIONALSTATEOF("boliviaPlurinationalStateof"),

    BONAIRESINTEUSTATIUSANDSABA("bonaireSintEustatiusandSaba"),

    BRAZIL("brazil"),

    BAHAMAS("bahamas"),

    BHUTAN("bhutan"),

    BOUVETISLAND("bouvetIsland"),

    BOTSWANA("botswana"),

    BELARUS("belarus"),

    BELIZE("belize"),

    CANADA("canada"),

    COCOSKEELINGISLANDS("cocosKeelingIslands"),

    CONGODEMOCRATICREPUBLICOFTHE("congoDemocraticRepublicofthe"),

    CENTRALAFRICANREPUBLIC("centralAfricanRepublic"),

    CONGO("congo"),

    SWITZERLAND("switzerland"),

    C_TEDIVOIRE("côtedIvoire"),

    COOKISLANDS("cookIslands"),

    CHILE("chile"),

    CAMEROON("cameroon"),

    CHINA("china"),

    COLOMBIA("colombia"),

    COSTARICA("costaRica"),

    CUBA("cuba"),

    CABOVERDE("caboVerde"),

    CURA_AO("curaçao"),

    CHRISTMASISLAND("christmasIsland"),

    CYPRUS("cyprus"),

    CZECHIA("czechia"),

    GERMANY("germany"),

    DJIBOUTI("djibouti"),

    DENMARK("denmark"),

    DOMINICA("dominica"),

    DOMINICANREPUBLIC("dominicanRepublic"),

    ALGERIA("algeria"),

    ECUADOR("ecuador"),

    ESTONIA("estonia"),

    EGYPT("egypt"),

    WESTERNSAHARA("westernSahara"),

    ERITREA("eritrea"),

    SPAIN("spain"),

    ETHIOPIA("ethiopia"),

    FINLAND("finland"),

    FIJI("fiji"),

    FALKLANDISLANDSMALVINAS("falklandIslandsMalvinas"),

    MICRONESIAFEDERATEDSTATESOF("micronesiaFederatedStatesof"),

    FAROEISLANDS("faroeIslands"),

    FRANCE("france"),

    GABON("gabon"),

    UNITEDKINGDOMOFGREATBRITAINANDNORTHERNIRELAND("unitedKingdomofGreatBritainandNorthernIreland"),

    GRENADA("grenada"),

    GEORGIA("georgia"),

    FRENCHGUIANA("frenchGuiana"),

    GUERNSEY("guernsey"),

    GHANA("ghana"),

    GIBRALTAR("gibraltar"),

    GREENLAND("greenland"),

    GAMBIA("gambia"),

    GUINEA("guinea"),

    GUADELOUPE("guadeloupe"),

    EQUATORIALGUINEA("equatorialGuinea"),

    GREECE("greece"),

    SOUTHGEORGIAANDTHESOUTHSANDWICHISLANDS("southGeorgiaandtheSouthSandwichIslands"),

    GUATEMALA("guatemala"),

    GUAM("guam"),

    GUINEABISSAU("guineaBissau"),

    GUYANA("guyana"),

    HONGKONG("hongKong"),

    HEARDISLANDANDMCDONALDISLANDS("heardIslandandMcDonaldIslands"),

    HONDURAS("honduras"),

    CROATIA("croatia"),

    HAITI("haiti"),

    HUNGARY("hungary"),

    INDONESIA("indonesia"),

    IRELAND("ireland"),

    ISRAEL("israel"),

    ISLEOFMAN("isleofMan"),

    INDIA("india"),

    BRITISHINDIANOCEANTERRITORY("britishIndianOceanTerritory"),

    IRAQ("iraq"),

    IRANISLAMICREPUBLICOF("iranIslamicRepublicof"),

    ICELAND("iceland"),

    ITALY("italy"),

    JERSEY("jersey"),

    JAMAICA("jamaica"),

    JORDAN("jordan"),

    JAPAN("japan"),

    KENYA("kenya"),

    KYRGYZSTAN("kyrgyzstan"),

    CAMBODIA("cambodia"),

    KIRIBATI("kiribati"),

    COMOROS("comoros"),

    SAINTKITTSANDNEVIS("saintKittsandNevis"),

    KOREADEMOCRATICPEOPLESREPUBLICOF("koreaDemocraticPeoplesRepublicof"),

    KOREAREPUBLICOF("koreaRepublicof"),

    KUWAIT("kuwait"),

    CAYMANISLANDS("caymanIslands"),

    KAZAKHSTAN("kazakhstan"),

    LAOPEOPLESDEMOCRATICREPUBLIC("laoPeoplesDemocraticRepublic"),

    LEBANON("lebanon"),

    SAINTLUCIA("saintLucia"),

    LIECHTENSTEIN("liechtenstein"),

    SRILANKA("sriLanka"),

    LIBERIA("liberia"),

    LESOTHO("lesotho"),

    LITHUANIA("lithuania"),

    LUXEMBOURG("luxembourg"),

    LATVIA("latvia"),

    LIBYA("libya"),

    MOROCCO("morocco"),

    MONACO("monaco"),

    MOLDOVAREPUBLICOF("moldovaRepublicof"),

    MONTENEGRO("montenegro"),

    SAINTMARTINFRENCHPART("saintMartinFrenchpart"),

    MADAGASCAR("madagascar"),

    MARSHALLISLANDS("marshallIslands"),

    NORTHMACEDONIA("northMacedonia"),

    MALI("mali"),

    MYANMAR("myanmar"),

    MONGOLIA("mongolia"),

    MACAO("macao"),

    NORTHERNMARIANAISLANDS("northernMarianaIslands"),

    MARTINIQUE("martinique"),

    MAURITANIA("mauritania"),

    MONTSERRAT("montserrat"),

    MALTA("malta"),

    MAURITIUS("mauritius"),

    MALDIVES("maldives"),

    MALAWI("malawi"),

    MEXICO("mexico"),

    MALAYSIA("malaysia"),

    MOZAMBIQUE("mozambique"),

    NAMIBIA("namibia"),

    NEWCALEDONIA("newCaledonia"),

    NIGER("niger"),

    NORFOLKISLAND("norfolkIsland"),

    NIGERIA("nigeria"),

    NICARAGUA("nicaragua"),

    NETHERLANDS("netherlands"),

    NORWAY("norway"),

    NEPAL("nepal"),

    NAURU("nauru"),

    NIUE("niue"),

    NEWZEALAND("newZealand"),

    OMAN("oman"),

    PANAMA("panama"),

    PERU("peru"),

    FRENCHPOLYNESIA("frenchPolynesia"),

    PAPUANEWGUINEA("papuaNewGuinea"),

    PHILIPPINES("philippines"),

    PAKISTAN("pakistan"),

    POLAND("poland"),

    SAINTPIERREANDMIQUELON("saintPierreandMiquelon"),

    PITCAIRN("pitcairn"),

    PUERTORICO("puertoRico"),

    PALESTINESTATEOF("palestineStateof"),

    PORTUGAL("portugal"),

    PALAU("palau"),

    PARAGUAY("paraguay"),

    QATAR("qatar"),

    R_UNION("réunion"),

    ROMANIA("romania"),

    SERBIA("serbia"),

    RUSSIANFEDERATION("russianFederation"),

    RWANDA("rwanda"),

    SAUDIARABIA("saudiArabia"),

    SOLOMONISLANDS("solomonIslands"),

    SEYCHELLES("seychelles"),

    SUDAN("sudan"),

    SWEDEN("sweden"),

    SINGAPORE("singapore"),

    SAINTHELENAASCENSIONANDTRISTANDACUNHA("saintHelenaAscensionandTristandaCunha"),

    SLOVENIA("slovenia"),

    SVALBARDANDJANMAYEN("svalbardandJanMayen"),

    SLOVAKIA("slovakia"),

    SIERRALEONE("sierraLeone"),

    SANMARINO("sanMarino"),

    SENEGAL("senegal"),

    SOMALIA("somalia"),

    SURINAME("suriname"),

    SOUTHSUDAN("southSudan"),

    SAOTOMEANDPRINCIPE("saoTomeandPrincipe"),

    ELSALVADOR("elSalvador"),

    SINTMAARTENDUTCHPART("sintMaartenDutchpart"),

    SYRIANARABREPUBLIC("syrianArabRepublic"),

    ESWATINI("eswatini"),

    TURKSANDCAICOSISLANDS("turksandCaicosIslands"),

    CHAD("chad"),

    FRENCHSOUTHERNTERRITORIES("frenchSouthernTerritories"),

    TOGO("togo"),

    THAILAND("thailand"),

    TAJIKISTAN("tajikistan"),

    TOKELAU("tokelau"),

    TIMORLESTE("timorLeste"),

    TURKMENISTAN("turkmenistan"),

    TUNISIA("tunisia"),

    TONGA("tonga"),

    TURKEY("turkey"),

    TRINIDADANDTOBAGO("trinidadandTobago"),

    TUVALU("tuvalu"),

    TAIWANPROVINCEOFCHINA("taiwanProvinceofChina"),

    TANZANIAUNITEDREPUBLICOF("tanzaniaUnitedRepublicof"),

    UKRAINE("ukraine"),

    UGANDA("uganda"),

    UNITEDSTATESMINOROUTLYINGISLANDS("unitedStatesMinorOutlyingIslands"),

    UNITEDSTATESOFAMERICA("unitedStatesofAmerica"),

    URUGUAY("uruguay"),

    UZBEKISTAN("uzbekistan"),

    HOLYSEE("holySee"),

    SAINTVINCENTANDTHEGRENADINES("saintVincentandtheGrenadines"),

    VENEZUELABOLIVARIANREPUBLICOF("venezuelaBolivarianRepublicof"),

    VIRGINISLANDSBRITISH("virginIslandsBritish"),

    VIRGINISLANDSUS("virginIslandsUS"),

    VIETNAM("vietNam"),

    VANUATU("vanuatu"),

    WALLISANDFUTUNA("wallisandFutuna"),

    SAMOA("samoa"),

    YEMEN("yemen"),

    MAYOTTE("mayotte"),

    SOUTHAFRICA("southAfrica"),

    ZAMBIA("zambia"),

    ZIMBABWE("zimbabwe");

    private String value;

    UcrCountryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UcrCountryEnum fromValue(String text) {
      for (UcrCountryEnum b : UcrCountryEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<UcrCountryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UcrCountryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UcrCountryEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return UcrCountryEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ucr_Country")
  private UcrCountryEnum ucrCountry = null;

  @SerializedName("amount")
  private Double amount = null;

  /**
   * Gets or Sets currency
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    CHF("cHF"),

    EUR("eUR");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String text) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CurrencyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("currency")
  private CurrencyEnum currency = null;

  /**
   * Gets or Sets udAddressType
   */
  @JsonAdapter(UdAddressTypeEnum.Adapter.class)
  public enum UdAddressTypeEnum {
    S("s"),

    K("k");

    private String value;

    UdAddressTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UdAddressTypeEnum fromValue(String text) {
      for (UdAddressTypeEnum b : UdAddressTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<UdAddressTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UdAddressTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UdAddressTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return UdAddressTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ud_AddressType")
  private UdAddressTypeEnum udAddressType = null;

  @SerializedName("ud_Name")
  private String udName = null;

  @SerializedName("ud_StreetOrAddressLine1")
  private String udStreetOrAddressLine1 = null;

  @SerializedName("ud_BuildNoOrAddressLine2")
  private String udBuildNoOrAddressLine2 = null;

  @SerializedName("ud_PostalCode")
  private String udPostalCode = null;

  @SerializedName("ud_City")
  private String udCity = null;

  /**
   * Gets or Sets udCountry
   */
  @JsonAdapter(UdCountryEnum.Adapter.class)
  public enum UdCountryEnum {
    ANDORRA("andorra"),

    UNITEDARABEMIRATES("unitedArabEmirates"),

    AFGHANISTAN("afghanistan"),

    ANTIGUAANDBARBUDA("antiguaandBarbuda"),

    ANGUILLA("anguilla"),

    ALBANIA("albania"),

    ARMENIA("armenia"),

    ANGOLA("angola"),

    ANTARCTICA("antarctica"),

    ARGENTINA("argentina"),

    AMERICANSAMOA("americanSamoa"),

    AUSTRIA("austria"),

    AUSTRALIA("australia"),

    ARUBA("aruba"),

    _LANDISLANDS("ålandIslands"),

    AZERBAIJAN("azerbaijan"),

    BOSNIAANDHERZEGOVINA("bosniaandHerzegovina"),

    BARBADOS("barbados"),

    BANGLADESH("bangladesh"),

    BELGIUM("belgium"),

    BURKINAFASO("burkinaFaso"),

    BULGARIA("bulgaria"),

    BAHRAIN("bahrain"),

    BURUNDI("burundi"),

    BENIN("benin"),

    SAINTBARTH_LEMY("saintBarthélemy"),

    BERMUDA("bermuda"),

    BRUNEIDARUSSALAM("bruneiDarussalam"),

    BOLIVIAPLURINATIONALSTATEOF("boliviaPlurinationalStateof"),

    BONAIRESINTEUSTATIUSANDSABA("bonaireSintEustatiusandSaba"),

    BRAZIL("brazil"),

    BAHAMAS("bahamas"),

    BHUTAN("bhutan"),

    BOUVETISLAND("bouvetIsland"),

    BOTSWANA("botswana"),

    BELARUS("belarus"),

    BELIZE("belize"),

    CANADA("canada"),

    COCOSKEELINGISLANDS("cocosKeelingIslands"),

    CONGODEMOCRATICREPUBLICOFTHE("congoDemocraticRepublicofthe"),

    CENTRALAFRICANREPUBLIC("centralAfricanRepublic"),

    CONGO("congo"),

    SWITZERLAND("switzerland"),

    C_TEDIVOIRE("côtedIvoire"),

    COOKISLANDS("cookIslands"),

    CHILE("chile"),

    CAMEROON("cameroon"),

    CHINA("china"),

    COLOMBIA("colombia"),

    COSTARICA("costaRica"),

    CUBA("cuba"),

    CABOVERDE("caboVerde"),

    CURA_AO("curaçao"),

    CHRISTMASISLAND("christmasIsland"),

    CYPRUS("cyprus"),

    CZECHIA("czechia"),

    GERMANY("germany"),

    DJIBOUTI("djibouti"),

    DENMARK("denmark"),

    DOMINICA("dominica"),

    DOMINICANREPUBLIC("dominicanRepublic"),

    ALGERIA("algeria"),

    ECUADOR("ecuador"),

    ESTONIA("estonia"),

    EGYPT("egypt"),

    WESTERNSAHARA("westernSahara"),

    ERITREA("eritrea"),

    SPAIN("spain"),

    ETHIOPIA("ethiopia"),

    FINLAND("finland"),

    FIJI("fiji"),

    FALKLANDISLANDSMALVINAS("falklandIslandsMalvinas"),

    MICRONESIAFEDERATEDSTATESOF("micronesiaFederatedStatesof"),

    FAROEISLANDS("faroeIslands"),

    FRANCE("france"),

    GABON("gabon"),

    UNITEDKINGDOMOFGREATBRITAINANDNORTHERNIRELAND("unitedKingdomofGreatBritainandNorthernIreland"),

    GRENADA("grenada"),

    GEORGIA("georgia"),

    FRENCHGUIANA("frenchGuiana"),

    GUERNSEY("guernsey"),

    GHANA("ghana"),

    GIBRALTAR("gibraltar"),

    GREENLAND("greenland"),

    GAMBIA("gambia"),

    GUINEA("guinea"),

    GUADELOUPE("guadeloupe"),

    EQUATORIALGUINEA("equatorialGuinea"),

    GREECE("greece"),

    SOUTHGEORGIAANDTHESOUTHSANDWICHISLANDS("southGeorgiaandtheSouthSandwichIslands"),

    GUATEMALA("guatemala"),

    GUAM("guam"),

    GUINEABISSAU("guineaBissau"),

    GUYANA("guyana"),

    HONGKONG("hongKong"),

    HEARDISLANDANDMCDONALDISLANDS("heardIslandandMcDonaldIslands"),

    HONDURAS("honduras"),

    CROATIA("croatia"),

    HAITI("haiti"),

    HUNGARY("hungary"),

    INDONESIA("indonesia"),

    IRELAND("ireland"),

    ISRAEL("israel"),

    ISLEOFMAN("isleofMan"),

    INDIA("india"),

    BRITISHINDIANOCEANTERRITORY("britishIndianOceanTerritory"),

    IRAQ("iraq"),

    IRANISLAMICREPUBLICOF("iranIslamicRepublicof"),

    ICELAND("iceland"),

    ITALY("italy"),

    JERSEY("jersey"),

    JAMAICA("jamaica"),

    JORDAN("jordan"),

    JAPAN("japan"),

    KENYA("kenya"),

    KYRGYZSTAN("kyrgyzstan"),

    CAMBODIA("cambodia"),

    KIRIBATI("kiribati"),

    COMOROS("comoros"),

    SAINTKITTSANDNEVIS("saintKittsandNevis"),

    KOREADEMOCRATICPEOPLESREPUBLICOF("koreaDemocraticPeoplesRepublicof"),

    KOREAREPUBLICOF("koreaRepublicof"),

    KUWAIT("kuwait"),

    CAYMANISLANDS("caymanIslands"),

    KAZAKHSTAN("kazakhstan"),

    LAOPEOPLESDEMOCRATICREPUBLIC("laoPeoplesDemocraticRepublic"),

    LEBANON("lebanon"),

    SAINTLUCIA("saintLucia"),

    LIECHTENSTEIN("liechtenstein"),

    SRILANKA("sriLanka"),

    LIBERIA("liberia"),

    LESOTHO("lesotho"),

    LITHUANIA("lithuania"),

    LUXEMBOURG("luxembourg"),

    LATVIA("latvia"),

    LIBYA("libya"),

    MOROCCO("morocco"),

    MONACO("monaco"),

    MOLDOVAREPUBLICOF("moldovaRepublicof"),

    MONTENEGRO("montenegro"),

    SAINTMARTINFRENCHPART("saintMartinFrenchpart"),

    MADAGASCAR("madagascar"),

    MARSHALLISLANDS("marshallIslands"),

    NORTHMACEDONIA("northMacedonia"),

    MALI("mali"),

    MYANMAR("myanmar"),

    MONGOLIA("mongolia"),

    MACAO("macao"),

    NORTHERNMARIANAISLANDS("northernMarianaIslands"),

    MARTINIQUE("martinique"),

    MAURITANIA("mauritania"),

    MONTSERRAT("montserrat"),

    MALTA("malta"),

    MAURITIUS("mauritius"),

    MALDIVES("maldives"),

    MALAWI("malawi"),

    MEXICO("mexico"),

    MALAYSIA("malaysia"),

    MOZAMBIQUE("mozambique"),

    NAMIBIA("namibia"),

    NEWCALEDONIA("newCaledonia"),

    NIGER("niger"),

    NORFOLKISLAND("norfolkIsland"),

    NIGERIA("nigeria"),

    NICARAGUA("nicaragua"),

    NETHERLANDS("netherlands"),

    NORWAY("norway"),

    NEPAL("nepal"),

    NAURU("nauru"),

    NIUE("niue"),

    NEWZEALAND("newZealand"),

    OMAN("oman"),

    PANAMA("panama"),

    PERU("peru"),

    FRENCHPOLYNESIA("frenchPolynesia"),

    PAPUANEWGUINEA("papuaNewGuinea"),

    PHILIPPINES("philippines"),

    PAKISTAN("pakistan"),

    POLAND("poland"),

    SAINTPIERREANDMIQUELON("saintPierreandMiquelon"),

    PITCAIRN("pitcairn"),

    PUERTORICO("puertoRico"),

    PALESTINESTATEOF("palestineStateof"),

    PORTUGAL("portugal"),

    PALAU("palau"),

    PARAGUAY("paraguay"),

    QATAR("qatar"),

    R_UNION("réunion"),

    ROMANIA("romania"),

    SERBIA("serbia"),

    RUSSIANFEDERATION("russianFederation"),

    RWANDA("rwanda"),

    SAUDIARABIA("saudiArabia"),

    SOLOMONISLANDS("solomonIslands"),

    SEYCHELLES("seychelles"),

    SUDAN("sudan"),

    SWEDEN("sweden"),

    SINGAPORE("singapore"),

    SAINTHELENAASCENSIONANDTRISTANDACUNHA("saintHelenaAscensionandTristandaCunha"),

    SLOVENIA("slovenia"),

    SVALBARDANDJANMAYEN("svalbardandJanMayen"),

    SLOVAKIA("slovakia"),

    SIERRALEONE("sierraLeone"),

    SANMARINO("sanMarino"),

    SENEGAL("senegal"),

    SOMALIA("somalia"),

    SURINAME("suriname"),

    SOUTHSUDAN("southSudan"),

    SAOTOMEANDPRINCIPE("saoTomeandPrincipe"),

    ELSALVADOR("elSalvador"),

    SINTMAARTENDUTCHPART("sintMaartenDutchpart"),

    SYRIANARABREPUBLIC("syrianArabRepublic"),

    ESWATINI("eswatini"),

    TURKSANDCAICOSISLANDS("turksandCaicosIslands"),

    CHAD("chad"),

    FRENCHSOUTHERNTERRITORIES("frenchSouthernTerritories"),

    TOGO("togo"),

    THAILAND("thailand"),

    TAJIKISTAN("tajikistan"),

    TOKELAU("tokelau"),

    TIMORLESTE("timorLeste"),

    TURKMENISTAN("turkmenistan"),

    TUNISIA("tunisia"),

    TONGA("tonga"),

    TURKEY("turkey"),

    TRINIDADANDTOBAGO("trinidadandTobago"),

    TUVALU("tuvalu"),

    TAIWANPROVINCEOFCHINA("taiwanProvinceofChina"),

    TANZANIAUNITEDREPUBLICOF("tanzaniaUnitedRepublicof"),

    UKRAINE("ukraine"),

    UGANDA("uganda"),

    UNITEDSTATESMINOROUTLYINGISLANDS("unitedStatesMinorOutlyingIslands"),

    UNITEDSTATESOFAMERICA("unitedStatesofAmerica"),

    URUGUAY("uruguay"),

    UZBEKISTAN("uzbekistan"),

    HOLYSEE("holySee"),

    SAINTVINCENTANDTHEGRENADINES("saintVincentandtheGrenadines"),

    VENEZUELABOLIVARIANREPUBLICOF("venezuelaBolivarianRepublicof"),

    VIRGINISLANDSBRITISH("virginIslandsBritish"),

    VIRGINISLANDSUS("virginIslandsUS"),

    VIETNAM("vietNam"),

    VANUATU("vanuatu"),

    WALLISANDFUTUNA("wallisandFutuna"),

    SAMOA("samoa"),

    YEMEN("yemen"),

    MAYOTTE("mayotte"),

    SOUTHAFRICA("southAfrica"),

    ZAMBIA("zambia"),

    ZIMBABWE("zimbabwe");

    private String value;

    UdCountryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UdCountryEnum fromValue(String text) {
      for (UdCountryEnum b : UdCountryEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<UdCountryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UdCountryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UdCountryEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return UdCountryEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ud_Country")
  private UdCountryEnum udCountry = null;

  /**
   * Gets or Sets referenceType
   */
  @JsonAdapter(ReferenceTypeEnum.Adapter.class)
  public enum ReferenceTypeEnum {
    QRR("qRR"),

    SCOR("sCOR"),

    NON("nON");

    private String value;

    ReferenceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReferenceTypeEnum fromValue(String text) {
      for (ReferenceTypeEnum b : ReferenceTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ReferenceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReferenceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReferenceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ReferenceTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("referenceType")
  private ReferenceTypeEnum referenceType = null;

  @SerializedName("reference")
  private String reference = null;

  @SerializedName("unstructuredMessage")
  private String unstructuredMessage = null;

  @SerializedName("billingInfo")
  private String billingInfo = null;

  @SerializedName("av1_Parameters")
  private String av1Parameters = null;

  @SerializedName("av2_Parameters")
  private String av2Parameters = null;

  public BillingData qrType(QrTypeEnum qrType) {
    this.qrType = qrType;
    return this;
  }

  /**
   * Get qrType
   * 
   * @return qrType
   **/
  @ApiModelProperty(value = "")
  public QrTypeEnum getQrType() {
    return qrType;
  }

  public void setQrType(QrTypeEnum qrType) {
    this.qrType = qrType;
  }

  public BillingData version(VersionEnum version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * 
   * @return version
   **/
  @ApiModelProperty(value = "")
  public VersionEnum getVersion() {
    return version;
  }

  public void setVersion(VersionEnum version) {
    this.version = version;
  }

  public BillingData codingType(CodingTypeEnum codingType) {
    this.codingType = codingType;
    return this;
  }

  /**
   * Get codingType
   * 
   * @return codingType
   **/
  @ApiModelProperty(value = "")
  public CodingTypeEnum getCodingType() {
    return codingType;
  }

  public void setCodingType(CodingTypeEnum codingType) {
    this.codingType = codingType;
  }

  public BillingData iban(String iban) {
    this.iban = iban;
    return this;
  }

  /**
   * Get iban
   * 
   * @return iban
   **/
  @ApiModelProperty(value = "")
  public String getIban() {
    return iban;
  }

  public void setIban(String iban) {
    this.iban = iban;
  }

  public BillingData crAddressType(CrAddressTypeEnum crAddressType) {
    this.crAddressType = crAddressType;
    return this;
  }

  /**
   * Get crAddressType
   * 
   * @return crAddressType
   **/
  @ApiModelProperty(value = "")
  public CrAddressTypeEnum getCrAddressType() {
    return crAddressType;
  }

  public void setCrAddressType(CrAddressTypeEnum crAddressType) {
    this.crAddressType = crAddressType;
  }

  public BillingData crName(String crName) {
    this.crName = crName;
    return this;
  }

  /**
   * Get crName
   * 
   * @return crName
   **/
  @ApiModelProperty(value = "")
  public String getCrName() {
    return crName;
  }

  public void setCrName(String crName) {
    this.crName = crName;
  }

  public BillingData crStreetOrAddressLine1(String crStreetOrAddressLine1) {
    this.crStreetOrAddressLine1 = crStreetOrAddressLine1;
    return this;
  }

  /**
   * Get crStreetOrAddressLine1
   * 
   * @return crStreetOrAddressLine1
   **/
  @ApiModelProperty(value = "")
  public String getCrStreetOrAddressLine1() {
    return crStreetOrAddressLine1;
  }

  public void setCrStreetOrAddressLine1(String crStreetOrAddressLine1) {
    this.crStreetOrAddressLine1 = crStreetOrAddressLine1;
  }

  public BillingData crBuildNoOrAddressLine2(String crBuildNoOrAddressLine2) {
    this.crBuildNoOrAddressLine2 = crBuildNoOrAddressLine2;
    return this;
  }

  /**
   * Get crBuildNoOrAddressLine2
   * 
   * @return crBuildNoOrAddressLine2
   **/
  @ApiModelProperty(value = "")
  public String getCrBuildNoOrAddressLine2() {
    return crBuildNoOrAddressLine2;
  }

  public void setCrBuildNoOrAddressLine2(String crBuildNoOrAddressLine2) {
    this.crBuildNoOrAddressLine2 = crBuildNoOrAddressLine2;
  }

  public BillingData crPostalCode(String crPostalCode) {
    this.crPostalCode = crPostalCode;
    return this;
  }

  /**
   * Get crPostalCode
   * 
   * @return crPostalCode
   **/
  @ApiModelProperty(value = "")
  public String getCrPostalCode() {
    return crPostalCode;
  }

  public void setCrPostalCode(String crPostalCode) {
    this.crPostalCode = crPostalCode;
  }

  public BillingData crCity(String crCity) {
    this.crCity = crCity;
    return this;
  }

  /**
   * Get crCity
   * 
   * @return crCity
   **/
  @ApiModelProperty(value = "")
  public String getCrCity() {
    return crCity;
  }

  public void setCrCity(String crCity) {
    this.crCity = crCity;
  }

  public BillingData crCountry(CrCountryEnum crCountry) {
    this.crCountry = crCountry;
    return this;
  }

  /**
   * Get crCountry
   * 
   * @return crCountry
   **/
  @ApiModelProperty(value = "")
  public CrCountryEnum getCrCountry() {
    return crCountry;
  }

  public void setCrCountry(CrCountryEnum crCountry) {
    this.crCountry = crCountry;
  }

  public BillingData ucrAddressType(UcrAddressTypeEnum ucrAddressType) {
    this.ucrAddressType = ucrAddressType;
    return this;
  }

  /**
   * Get ucrAddressType
   * 
   * @return ucrAddressType
   **/
  @ApiModelProperty(value = "")
  public UcrAddressTypeEnum getUcrAddressType() {
    return ucrAddressType;
  }

  public void setUcrAddressType(UcrAddressTypeEnum ucrAddressType) {
    this.ucrAddressType = ucrAddressType;
  }

  public BillingData ucrName(String ucrName) {
    this.ucrName = ucrName;
    return this;
  }

  /**
   * Get ucrName
   * 
   * @return ucrName
   **/
  @ApiModelProperty(value = "")
  public String getUcrName() {
    return ucrName;
  }

  public void setUcrName(String ucrName) {
    this.ucrName = ucrName;
  }

  public BillingData ucrStreetOrAddressLine1(String ucrStreetOrAddressLine1) {
    this.ucrStreetOrAddressLine1 = ucrStreetOrAddressLine1;
    return this;
  }

  /**
   * Get ucrStreetOrAddressLine1
   * 
   * @return ucrStreetOrAddressLine1
   **/
  @ApiModelProperty(value = "")
  public String getUcrStreetOrAddressLine1() {
    return ucrStreetOrAddressLine1;
  }

  public void setUcrStreetOrAddressLine1(String ucrStreetOrAddressLine1) {
    this.ucrStreetOrAddressLine1 = ucrStreetOrAddressLine1;
  }

  public BillingData ucrBuildNoOrAddressLine2(String ucrBuildNoOrAddressLine2) {
    this.ucrBuildNoOrAddressLine2 = ucrBuildNoOrAddressLine2;
    return this;
  }

  /**
   * Get ucrBuildNoOrAddressLine2
   * 
   * @return ucrBuildNoOrAddressLine2
   **/
  @ApiModelProperty(value = "")
  public String getUcrBuildNoOrAddressLine2() {
    return ucrBuildNoOrAddressLine2;
  }

  public void setUcrBuildNoOrAddressLine2(String ucrBuildNoOrAddressLine2) {
    this.ucrBuildNoOrAddressLine2 = ucrBuildNoOrAddressLine2;
  }

  public BillingData ucrPostalCode(String ucrPostalCode) {
    this.ucrPostalCode = ucrPostalCode;
    return this;
  }

  /**
   * Get ucrPostalCode
   * 
   * @return ucrPostalCode
   **/
  @ApiModelProperty(value = "")
  public String getUcrPostalCode() {
    return ucrPostalCode;
  }

  public void setUcrPostalCode(String ucrPostalCode) {
    this.ucrPostalCode = ucrPostalCode;
  }

  public BillingData ucrCity(String ucrCity) {
    this.ucrCity = ucrCity;
    return this;
  }

  /**
   * Get ucrCity
   * 
   * @return ucrCity
   **/
  @ApiModelProperty(value = "")
  public String getUcrCity() {
    return ucrCity;
  }

  public void setUcrCity(String ucrCity) {
    this.ucrCity = ucrCity;
  }

  public BillingData ucrCountry(UcrCountryEnum ucrCountry) {
    this.ucrCountry = ucrCountry;
    return this;
  }

  /**
   * Get ucrCountry
   * 
   * @return ucrCountry
   **/
  @ApiModelProperty(value = "")
  public UcrCountryEnum getUcrCountry() {
    return ucrCountry;
  }

  public void setUcrCountry(UcrCountryEnum ucrCountry) {
    this.ucrCountry = ucrCountry;
  }

  public BillingData amount(Double amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * 
   * @return amount
   **/
  @ApiModelProperty(value = "")
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }

  public BillingData currency(CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * 
   * @return currency
   **/
  @ApiModelProperty(value = "")
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }

  public BillingData udAddressType(UdAddressTypeEnum udAddressType) {
    this.udAddressType = udAddressType;
    return this;
  }

  /**
   * Get udAddressType
   * 
   * @return udAddressType
   **/
  @ApiModelProperty(value = "")
  public UdAddressTypeEnum getUdAddressType() {
    return udAddressType;
  }

  public void setUdAddressType(UdAddressTypeEnum udAddressType) {
    this.udAddressType = udAddressType;
  }

  public BillingData udName(String udName) {
    this.udName = udName;
    return this;
  }

  /**
   * Get udName
   * 
   * @return udName
   **/
  @ApiModelProperty(value = "")
  public String getUdName() {
    return udName;
  }

  public void setUdName(String udName) {
    this.udName = udName;
  }

  public BillingData udStreetOrAddressLine1(String udStreetOrAddressLine1) {
    this.udStreetOrAddressLine1 = udStreetOrAddressLine1;
    return this;
  }

  /**
   * Get udStreetOrAddressLine1
   * 
   * @return udStreetOrAddressLine1
   **/
  @ApiModelProperty(value = "")
  public String getUdStreetOrAddressLine1() {
    return udStreetOrAddressLine1;
  }

  public void setUdStreetOrAddressLine1(String udStreetOrAddressLine1) {
    this.udStreetOrAddressLine1 = udStreetOrAddressLine1;
  }

  public BillingData udBuildNoOrAddressLine2(String udBuildNoOrAddressLine2) {
    this.udBuildNoOrAddressLine2 = udBuildNoOrAddressLine2;
    return this;
  }

  /**
   * Get udBuildNoOrAddressLine2
   * 
   * @return udBuildNoOrAddressLine2
   **/
  @ApiModelProperty(value = "")
  public String getUdBuildNoOrAddressLine2() {
    return udBuildNoOrAddressLine2;
  }

  public void setUdBuildNoOrAddressLine2(String udBuildNoOrAddressLine2) {
    this.udBuildNoOrAddressLine2 = udBuildNoOrAddressLine2;
  }

  public BillingData udPostalCode(String udPostalCode) {
    this.udPostalCode = udPostalCode;
    return this;
  }

  /**
   * Get udPostalCode
   * 
   * @return udPostalCode
   **/
  @ApiModelProperty(value = "")
  public String getUdPostalCode() {
    return udPostalCode;
  }

  public void setUdPostalCode(String udPostalCode) {
    this.udPostalCode = udPostalCode;
  }

  public BillingData udCity(String udCity) {
    this.udCity = udCity;
    return this;
  }

  /**
   * Get udCity
   * 
   * @return udCity
   **/
  @ApiModelProperty(value = "")
  public String getUdCity() {
    return udCity;
  }

  public void setUdCity(String udCity) {
    this.udCity = udCity;
  }

  public BillingData udCountry(UdCountryEnum udCountry) {
    this.udCountry = udCountry;
    return this;
  }

  /**
   * Get udCountry
   * 
   * @return udCountry
   **/
  @ApiModelProperty(value = "")
  public UdCountryEnum getUdCountry() {
    return udCountry;
  }

  public void setUdCountry(UdCountryEnum udCountry) {
    this.udCountry = udCountry;
  }

  public BillingData referenceType(ReferenceTypeEnum referenceType) {
    this.referenceType = referenceType;
    return this;
  }

  /**
   * Get referenceType
   * 
   * @return referenceType
   **/
  @ApiModelProperty(value = "")
  public ReferenceTypeEnum getReferenceType() {
    return referenceType;
  }

  public void setReferenceType(ReferenceTypeEnum referenceType) {
    this.referenceType = referenceType;
  }

  public BillingData reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Get reference
   * 
   * @return reference
   **/
  @ApiModelProperty(value = "")
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }

  public BillingData unstructuredMessage(String unstructuredMessage) {
    this.unstructuredMessage = unstructuredMessage;
    return this;
  }

  /**
   * Get unstructuredMessage
   * 
   * @return unstructuredMessage
   **/
  @ApiModelProperty(value = "")
  public String getUnstructuredMessage() {
    return unstructuredMessage;
  }

  public void setUnstructuredMessage(String unstructuredMessage) {
    this.unstructuredMessage = unstructuredMessage;
  }

  public BillingData billingInfo(String billingInfo) {
    this.billingInfo = billingInfo;
    return this;
  }

  /**
   * Get billingInfo
   * 
   * @return billingInfo
   **/
  @ApiModelProperty(value = "")
  public String getBillingInfo() {
    return billingInfo;
  }

  public void setBillingInfo(String billingInfo) {
    this.billingInfo = billingInfo;
  }

  public BillingData av1Parameters(String av1Parameters) {
    this.av1Parameters = av1Parameters;
    return this;
  }

  /**
   * Get av1Parameters
   * 
   * @return av1Parameters
   **/
  @ApiModelProperty(value = "")
  public String getAv1Parameters() {
    return av1Parameters;
  }

  public void setAv1Parameters(String av1Parameters) {
    this.av1Parameters = av1Parameters;
  }

  public BillingData av2Parameters(String av2Parameters) {
    this.av2Parameters = av2Parameters;
    return this;
  }

  /**
   * Get av2Parameters
   * 
   * @return av2Parameters
   **/
  @ApiModelProperty(value = "")
  public String getAv2Parameters() {
    return av2Parameters;
  }

  public void setAv2Parameters(String av2Parameters) {
    this.av2Parameters = av2Parameters;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingData billingData = (BillingData) o;
    return Objects.equals(this.qrType, billingData.qrType) && Objects.equals(this.version, billingData.version)
        && Objects.equals(this.codingType, billingData.codingType) && Objects.equals(this.iban, billingData.iban)
        && Objects.equals(this.crAddressType, billingData.crAddressType)
        && Objects.equals(this.crName, billingData.crName)
        && Objects.equals(this.crStreetOrAddressLine1, billingData.crStreetOrAddressLine1)
        && Objects.equals(this.crBuildNoOrAddressLine2, billingData.crBuildNoOrAddressLine2)
        && Objects.equals(this.crPostalCode, billingData.crPostalCode)
        && Objects.equals(this.crCity, billingData.crCity) && Objects.equals(this.crCountry, billingData.crCountry)
        && Objects.equals(this.ucrAddressType, billingData.ucrAddressType)
        && Objects.equals(this.ucrName, billingData.ucrName)
        && Objects.equals(this.ucrStreetOrAddressLine1, billingData.ucrStreetOrAddressLine1)
        && Objects.equals(this.ucrBuildNoOrAddressLine2, billingData.ucrBuildNoOrAddressLine2)
        && Objects.equals(this.ucrPostalCode, billingData.ucrPostalCode)
        && Objects.equals(this.ucrCity, billingData.ucrCity) && Objects.equals(this.ucrCountry, billingData.ucrCountry)
        && Objects.equals(this.amount, billingData.amount) && Objects.equals(this.currency, billingData.currency)
        && Objects.equals(this.udAddressType, billingData.udAddressType)
        && Objects.equals(this.udName, billingData.udName)
        && Objects.equals(this.udStreetOrAddressLine1, billingData.udStreetOrAddressLine1)
        && Objects.equals(this.udBuildNoOrAddressLine2, billingData.udBuildNoOrAddressLine2)
        && Objects.equals(this.udPostalCode, billingData.udPostalCode)
        && Objects.equals(this.udCity, billingData.udCity) && Objects.equals(this.udCountry, billingData.udCountry)
        && Objects.equals(this.referenceType, billingData.referenceType)
        && Objects.equals(this.reference, billingData.reference)
        && Objects.equals(this.unstructuredMessage, billingData.unstructuredMessage)
        && Objects.equals(this.billingInfo, billingData.billingInfo)
        && Objects.equals(this.av1Parameters, billingData.av1Parameters)
        && Objects.equals(this.av2Parameters, billingData.av2Parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(qrType, version, codingType, iban, crAddressType, crName, crStreetOrAddressLine1,
        crBuildNoOrAddressLine2, crPostalCode, crCity, crCountry, ucrAddressType, ucrName, ucrStreetOrAddressLine1,
        ucrBuildNoOrAddressLine2, ucrPostalCode, ucrCity, ucrCountry, amount, currency, udAddressType, udName,
        udStreetOrAddressLine1, udBuildNoOrAddressLine2, udPostalCode, udCity, udCountry, referenceType, reference,
        unstructuredMessage, billingInfo, av1Parameters, av2Parameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingData {\n");

    sb.append("    qrType: ").append(toIndentedString(qrType)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    codingType: ").append(toIndentedString(codingType)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("    crAddressType: ").append(toIndentedString(crAddressType)).append("\n");
    sb.append("    crName: ").append(toIndentedString(crName)).append("\n");
    sb.append("    crStreetOrAddressLine1: ").append(toIndentedString(crStreetOrAddressLine1)).append("\n");
    sb.append("    crBuildNoOrAddressLine2: ").append(toIndentedString(crBuildNoOrAddressLine2)).append("\n");
    sb.append("    crPostalCode: ").append(toIndentedString(crPostalCode)).append("\n");
    sb.append("    crCity: ").append(toIndentedString(crCity)).append("\n");
    sb.append("    crCountry: ").append(toIndentedString(crCountry)).append("\n");
    sb.append("    ucrAddressType: ").append(toIndentedString(ucrAddressType)).append("\n");
    sb.append("    ucrName: ").append(toIndentedString(ucrName)).append("\n");
    sb.append("    ucrStreetOrAddressLine1: ").append(toIndentedString(ucrStreetOrAddressLine1)).append("\n");
    sb.append("    ucrBuildNoOrAddressLine2: ").append(toIndentedString(ucrBuildNoOrAddressLine2)).append("\n");
    sb.append("    ucrPostalCode: ").append(toIndentedString(ucrPostalCode)).append("\n");
    sb.append("    ucrCity: ").append(toIndentedString(ucrCity)).append("\n");
    sb.append("    ucrCountry: ").append(toIndentedString(ucrCountry)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    udAddressType: ").append(toIndentedString(udAddressType)).append("\n");
    sb.append("    udName: ").append(toIndentedString(udName)).append("\n");
    sb.append("    udStreetOrAddressLine1: ").append(toIndentedString(udStreetOrAddressLine1)).append("\n");
    sb.append("    udBuildNoOrAddressLine2: ").append(toIndentedString(udBuildNoOrAddressLine2)).append("\n");
    sb.append("    udPostalCode: ").append(toIndentedString(udPostalCode)).append("\n");
    sb.append("    udCity: ").append(toIndentedString(udCity)).append("\n");
    sb.append("    udCountry: ").append(toIndentedString(udCountry)).append("\n");
    sb.append("    referenceType: ").append(toIndentedString(referenceType)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    unstructuredMessage: ").append(toIndentedString(unstructuredMessage)).append("\n");
    sb.append("    billingInfo: ").append(toIndentedString(billingInfo)).append("\n");
    sb.append("    av1Parameters: ").append(toIndentedString(av1Parameters)).append("\n");
    sb.append("    av2Parameters: ").append(toIndentedString(av2Parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

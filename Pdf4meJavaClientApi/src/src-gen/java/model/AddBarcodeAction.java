/*
 * Pdf4me
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;
import model.BarcodeColor;

/**
 * AddBarcodeAction
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-07-02T11:08:16.145Z")
public class AddBarcodeAction {
  /**
   * Gets or Sets barcodeType
   */
  @JsonAdapter(BarcodeTypeEnum.Adapter.class)
  public enum BarcodeTypeEnum {
    NONE("none"),

    CODE11("code11"),

    CODE2OF5STANDARD("code2Of5Standard"),

    CODE2OF5INTERLEAVED("code2Of5Interleaved"),

    CODE2OF5IATA("code2Of5Iata"),

    CODE2OF5MATRIX("code2Of5Matrix"),

    CODE2OF5DATALOGIC("code2Of5DataLogic"),

    CODE2OF5INDUSTRY("code2Of5Industry"),

    CODE39("code39"),

    CODE39EXTENDED("code39Extended"),

    EAN8("ean8"),

    EAN8WITH2ADDON("ean8With2Addon"),

    EAN8WITH5ADDON("ean8With5Addon"),

    EAN13("ean13"),

    EAN13WITH2ADDON("ean13With2Addon"),

    EAN13WITH5ADDON("ean13With5Addon"),

    EANUCC128("eanUcc128"),

    UPC12("upc12"),

    CODABAR2("codabar2"),

    CODABAR18("codabar18"),

    CODE128("code128"),

    DEUTSCHEPOSTLEITCODE("deutschePostLeitcode"),

    DEUTSCHEPOSTIDENTCODE("deutschePostIdentcode"),

    ISBN13WITH5ADDON("isbn13With5Addon"),

    ISMN("ismn"),

    CODE93("code93"),

    ISSN("issn"),

    ISSNWITH2ADDON("issnWith2Addon"),

    FLATTERMARKEN("flattermarken"),

    GS1DATABAR("gs1DataBar"),

    GS1DATABARLIMITED("gs1DataBarLimited"),

    GS1DATABAREXPANDED("gs1DataBarExpanded"),

    TELEPENALPHA("telepenAlpha"),

    UCC128("ucc128"),

    UPCA("upcA"),

    UPCAWITH2ADDON("upcAWith2Addon"),

    UPCAWITH5ADDON("upcAWith5Addon"),

    UPCE("upcE"),

    UPCEWITH2ADDON("upcEWith2Addon"),

    UPCEWITH5ADDON("upcEWith5Addon"),

    USPSPOSTNET5("uspsPostnet5"),

    USPSPOSTNET6("uspsPostnet6"),

    USPSPOSTNET9("uspsPostnet9"),

    USPSPOSTNET10("uspsPostnet10"),

    USPSPOSTNET11("uspsPostnet11"),

    USPSPOSTNET12("uspsPostnet12"),

    PLESSEY("plessey"),

    MSI("msi"),

    SSCC18("sscc18"),

    FIM("fim"),

    LOGMARS("logmars"),

    PHARMACODEONETRACK("pharmacodeOneTrack"),

    PZN7("pzn7"),

    PHARMACODETWOTRACK("pharmacodeTwoTrack"),

    CEPNET("cepNet"),

    PDF417("pdf417"),

    PDF417TRUNCATED("pdf417Truncated"),

    MAXICODE("maxicode"),

    QRCODE("qrCode"),

    CODE128SUBSETA("code128SubsetA"),

    CODE128SUBSETB("code128SubsetB"),

    CODE128SUBSETC("code128SubsetC"),

    CODE93EXTENDED("code93Extended"),

    AUSTRALIANPOSTCUSTOM("australianPostCustom"),

    AUSTRALIANPOSTCUSTOM2("australianPostCustom2"),

    AUSTRALIANPOSTCUSTOM3("australianPostCustom3"),

    AUSTRALIANPOSTREPLYPAID("australianPostReplyPaid"),

    AUSTRALIANPOSTROUTING("australianPostRouting"),

    AUSTRALIANPOSTREDIRECTION("australianPostRedirection"),

    ISBN13("isbn13"),

    RM4SCC("rm4Scc"),

    DATAMATRIX("dataMatrix"),

    EAN14("ean14"),

    VIN("vin"),

    CODABLOCKF("codablockF"),

    NVE18("nve18"),

    JAPANESEPOSTAL("japanesePostal"),

    KOREANPOSTALAUTHORITY("koreanPostalAuthority"),

    GS1DATABARTRUNCATED("gs1DataBarTruncated"),

    GS1DATABARSTACKED("gs1DataBarStacked"),

    GS1DATABARSTACKEDOMNIDIRECTIONAL("gs1DataBarStackedOmnidirectional"),

    GS1DATABAREXPANDEDSTACKED("gs1DataBarExpandedStacked"),

    PLANET12("planet12"),

    PLANET14("planet14"),

    MICROPDF417("microPdf417"),

    USPSINTELLIGENTMAIL("uspsIntelligentMail"),

    PLESSEYBIDIRECTIONAL("plesseyBidirectional"),

    TELEPEN("telepen"),

    GS1_128("gs1_128"),

    ITF14("itf14"),

    KIX("kix"),

    CODE32("code32"),

    AZTEC("aztec"),

    ITALIANPOSTAL2OF5("italianPostal2Of5"),

    ITALIANPOSTAL3OF9("italianPostal3Of9"),

    DPD("dpd"),

    MICROQRCODE("microQRCode"),

    HIBCLIC128("hibcLic128"),

    HIBCLIC3OF9("hibcLic3OF9"),

    HIBCPAS128("hibcPas128"),

    HIBCPAS3OF9("hibcPas3OF9"),

    HIBCLICDATAMATRIX("hibcLicDataMatrix"),

    HIBCPASDATAMATRIX("hibcPasDataMatrix"),

    HIBCLICQRCODE("hibcLicQRCode"),

    HIBCPASQRCODE("hibcPasQRCode"),

    HIBCLICPDF417("hibcLicPDF417"),

    HIBCPASPDF417("hibcPasPDF417"),

    HIBCLICMPDF417("hibcLicMPDF417"),

    HIBCPASMPDF417("hibcPasMPDF417"),

    HIBCLICCODABLOCK_F("hibcLicCODABLOCK_F"),

    HIBCPASCODABLOCK_F("hibcPasCODABLOCK_F"),

    QRCODE2005("qrcode2005"),

    PZN8("pzn8"),

    DOTCODE("dotCode"),

    HANXIN("hanXin"),

    USPSIMPACKAGE("uSPSIMPackage"),

    SWEDISHPOSTALSHIPMENTID("swedishPostalShipmentId"),

    MAILMARK_2D("mailmark_2D"),

    UPUS10("upuS10"),

    MAILMARK_4STATE("mailmark_4state"),

    HIBCLICAZTEC("hibcLicAztec"),

    HIBCPASAZTEC("hibcPasAztec"),

    PPN("ppn"),

    NTIN("ntin"),

    SWISSQRCODE("swissQrCode");

    private String value;

    BarcodeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BarcodeTypeEnum fromValue(String text) {
      for (BarcodeTypeEnum b : BarcodeTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BarcodeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BarcodeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BarcodeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BarcodeTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("barcodeType")
  private BarcodeTypeEnum barcodeType = null;

  @SerializedName("value")
  private String value = null;

  @SerializedName("height")
  private Integer height = null;

  @SerializedName("width")
  private Integer width = null;

  /**
   * Gets or Sets alignX
   */
  @JsonAdapter(AlignXEnum.Adapter.class)
  public enum AlignXEnum {
    LEFT("left"),

    CENTER("center"),

    RIGHT("right");

    private String value;

    AlignXEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlignXEnum fromValue(String text) {
      for (AlignXEnum b : AlignXEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AlignXEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlignXEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlignXEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AlignXEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("alignX")
  private AlignXEnum alignX = null;

  /**
   * Gets or Sets alignY
   */
  @JsonAdapter(AlignYEnum.Adapter.class)
  public enum AlignYEnum {
    TOP("top"),

    MIDDLE("middle"),

    BOTTOM("bottom");

    private String value;

    AlignYEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlignYEnum fromValue(String text) {
      for (AlignYEnum b : AlignYEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AlignYEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlignYEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlignYEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AlignYEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("alignY")
  private AlignYEnum alignY = null;

  @SerializedName("marginX")
  private Integer marginX = null;

  @SerializedName("marginY")
  private Integer marginY = null;

  @SerializedName("pageSequence")
  private String pageSequence = null;

  @SerializedName("rotate")
  private Integer rotate = null;

  @SerializedName("barcodeColor")
  private BarcodeColor barcodeColor = null;

  @SerializedName("backgroundColor")
  private BarcodeColor backgroundColor = null;

  @SerializedName("actionId")
  private UUID actionId = null;

  public AddBarcodeAction barcodeType(BarcodeTypeEnum barcodeType) {
    this.barcodeType = barcodeType;
    return this;
  }

  /**
   * Get barcodeType
   * 
   * @return barcodeType
   **/
  @ApiModelProperty(value = "")
  public BarcodeTypeEnum getBarcodeType() {
    return barcodeType;
  }

  public void setBarcodeType(BarcodeTypeEnum barcodeType) {
    this.barcodeType = barcodeType;
  }

  public AddBarcodeAction value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * 
   * @return value
   **/
  @ApiModelProperty(value = "")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public AddBarcodeAction height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * 
   * @return height
   **/
  @ApiModelProperty(value = "")
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }

  public AddBarcodeAction width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Get width
   * 
   * @return width
   **/
  @ApiModelProperty(value = "")
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }

  public AddBarcodeAction alignX(AlignXEnum alignX) {
    this.alignX = alignX;
    return this;
  }

  /**
   * Get alignX
   * 
   * @return alignX
   **/
  @ApiModelProperty(value = "")
  public AlignXEnum getAlignX() {
    return alignX;
  }

  public void setAlignX(AlignXEnum alignX) {
    this.alignX = alignX;
  }

  public AddBarcodeAction alignY(AlignYEnum alignY) {
    this.alignY = alignY;
    return this;
  }

  /**
   * Get alignY
   * 
   * @return alignY
   **/
  @ApiModelProperty(value = "")
  public AlignYEnum getAlignY() {
    return alignY;
  }

  public void setAlignY(AlignYEnum alignY) {
    this.alignY = alignY;
  }

  public AddBarcodeAction marginX(Integer marginX) {
    this.marginX = marginX;
    return this;
  }

  /**
   * Get marginX
   * 
   * @return marginX
   **/
  @ApiModelProperty(value = "")
  public Integer getMarginX() {
    return marginX;
  }

  public void setMarginX(Integer marginX) {
    this.marginX = marginX;
  }

  public AddBarcodeAction marginY(Integer marginY) {
    this.marginY = marginY;
    return this;
  }

  /**
   * Get marginY
   * 
   * @return marginY
   **/
  @ApiModelProperty(value = "")
  public Integer getMarginY() {
    return marginY;
  }

  public void setMarginY(Integer marginY) {
    this.marginY = marginY;
  }

  public AddBarcodeAction pageSequence(String pageSequence) {
    this.pageSequence = pageSequence;
    return this;
  }

  /**
   * Get pageSequence
   * 
   * @return pageSequence
   **/
  @ApiModelProperty(value = "")
  public String getPageSequence() {
    return pageSequence;
  }

  public void setPageSequence(String pageSequence) {
    this.pageSequence = pageSequence;
  }

  public AddBarcodeAction rotate(Integer rotate) {
    this.rotate = rotate;
    return this;
  }

  /**
   * Get rotate
   * 
   * @return rotate
   **/
  @ApiModelProperty(value = "")
  public Integer getRotate() {
    return rotate;
  }

  public void setRotate(Integer rotate) {
    this.rotate = rotate;
  }

  public AddBarcodeAction barcodeColor(BarcodeColor barcodeColor) {
    this.barcodeColor = barcodeColor;
    return this;
  }

  /**
   * Get barcodeColor
   * 
   * @return barcodeColor
   **/
  @ApiModelProperty(value = "")
  public BarcodeColor getBarcodeColor() {
    return barcodeColor;
  }

  public void setBarcodeColor(BarcodeColor barcodeColor) {
    this.barcodeColor = barcodeColor;
  }

  public AddBarcodeAction backgroundColor(BarcodeColor backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Get backgroundColor
   * 
   * @return backgroundColor
   **/
  @ApiModelProperty(value = "")
  public BarcodeColor getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(BarcodeColor backgroundColor) {
    this.backgroundColor = backgroundColor;
  }

  public AddBarcodeAction actionId(UUID actionId) {
    this.actionId = actionId;
    return this;
  }

  /**
   * Get actionId
   * 
   * @return actionId
   **/
  @ApiModelProperty(value = "")
  public UUID getActionId() {
    return actionId;
  }

  public void setActionId(UUID actionId) {
    this.actionId = actionId;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddBarcodeAction addBarcodeAction = (AddBarcodeAction) o;
    return Objects.equals(this.barcodeType, addBarcodeAction.barcodeType)
        && Objects.equals(this.value, addBarcodeAction.value) && Objects.equals(this.height, addBarcodeAction.height)
        && Objects.equals(this.width, addBarcodeAction.width) && Objects.equals(this.alignX, addBarcodeAction.alignX)
        && Objects.equals(this.alignY, addBarcodeAction.alignY)
        && Objects.equals(this.marginX, addBarcodeAction.marginX)
        && Objects.equals(this.marginY, addBarcodeAction.marginY)
        && Objects.equals(this.pageSequence, addBarcodeAction.pageSequence)
        && Objects.equals(this.rotate, addBarcodeAction.rotate)
        && Objects.equals(this.barcodeColor, addBarcodeAction.barcodeColor)
        && Objects.equals(this.backgroundColor, addBarcodeAction.backgroundColor)
        && Objects.equals(this.actionId, addBarcodeAction.actionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(barcodeType, value, height, width, alignX, alignY, marginX, marginY, pageSequence, rotate,
        barcodeColor, backgroundColor, actionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddBarcodeAction {\n");

    sb.append("    barcodeType: ").append(toIndentedString(barcodeType)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    alignX: ").append(toIndentedString(alignX)).append("\n");
    sb.append("    alignY: ").append(toIndentedString(alignY)).append("\n");
    sb.append("    marginX: ").append(toIndentedString(marginX)).append("\n");
    sb.append("    marginY: ").append(toIndentedString(marginY)).append("\n");
    sb.append("    pageSequence: ").append(toIndentedString(pageSequence)).append("\n");
    sb.append("    rotate: ").append(toIndentedString(rotate)).append("\n");
    sb.append("    barcodeColor: ").append(toIndentedString(barcodeColor)).append("\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

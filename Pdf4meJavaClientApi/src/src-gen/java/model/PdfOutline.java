/*
 * Pdf4me
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import model.PdfOutline;

/**
 * PdfOutline
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-07-02T11:08:16.145Z")
public class PdfOutline {
  @SerializedName("childs")
  private List<PdfOutline> childs = null;

  @SerializedName("count")
  private Integer count = null;

  @SerializedName("level")
  private Integer level = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("bottom")
  private Double bottom = null;

  @SerializedName("left")
  private Double left = null;

  @SerializedName("pageNo")
  private Integer pageNo = null;

  @SerializedName("right")
  private Double right = null;

  @SerializedName("top")
  private Double top = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("zoom")
  private Double zoom = null;

  public PdfOutline childs(List<PdfOutline> childs) {
    this.childs = childs;
    return this;
  }

  public PdfOutline addChildsItem(PdfOutline childsItem) {
    if (this.childs == null) {
      this.childs = new ArrayList<PdfOutline>();
    }
    this.childs.add(childsItem);
    return this;
  }

  /**
   * Get childs
   * 
   * @return childs
   **/
  @ApiModelProperty(value = "")
  public List<PdfOutline> getChilds() {
    return childs;
  }

  public void setChilds(List<PdfOutline> childs) {
    this.childs = childs;
  }

  public PdfOutline count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * 
   * @return count
   **/
  @ApiModelProperty(value = "")
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }

  public PdfOutline level(Integer level) {
    this.level = level;
    return this;
  }

  /**
   * Get level
   * 
   * @return level
   **/
  @ApiModelProperty(value = "")
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }

  public PdfOutline title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * 
   * @return title
   **/
  @ApiModelProperty(value = "")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public PdfOutline bottom(Double bottom) {
    this.bottom = bottom;
    return this;
  }

  /**
   * Get bottom
   * 
   * @return bottom
   **/
  @ApiModelProperty(value = "")
  public Double getBottom() {
    return bottom;
  }

  public void setBottom(Double bottom) {
    this.bottom = bottom;
  }

  public PdfOutline left(Double left) {
    this.left = left;
    return this;
  }

  /**
   * Get left
   * 
   * @return left
   **/
  @ApiModelProperty(value = "")
  public Double getLeft() {
    return left;
  }

  public void setLeft(Double left) {
    this.left = left;
  }

  public PdfOutline pageNo(Integer pageNo) {
    this.pageNo = pageNo;
    return this;
  }

  /**
   * Get pageNo
   * 
   * @return pageNo
   **/
  @ApiModelProperty(value = "")
  public Integer getPageNo() {
    return pageNo;
  }

  public void setPageNo(Integer pageNo) {
    this.pageNo = pageNo;
  }

  public PdfOutline right(Double right) {
    this.right = right;
    return this;
  }

  /**
   * Get right
   * 
   * @return right
   **/
  @ApiModelProperty(value = "")
  public Double getRight() {
    return right;
  }

  public void setRight(Double right) {
    this.right = right;
  }

  public PdfOutline top(Double top) {
    this.top = top;
    return this;
  }

  /**
   * Get top
   * 
   * @return top
   **/
  @ApiModelProperty(value = "")
  public Double getTop() {
    return top;
  }

  public void setTop(Double top) {
    this.top = top;
  }

  public PdfOutline type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * 
   * @return type
   **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public PdfOutline zoom(Double zoom) {
    this.zoom = zoom;
    return this;
  }

  /**
   * Get zoom
   * 
   * @return zoom
   **/
  @ApiModelProperty(value = "")
  public Double getZoom() {
    return zoom;
  }

  public void setZoom(Double zoom) {
    this.zoom = zoom;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfOutline pdfOutline = (PdfOutline) o;
    return Objects.equals(this.childs, pdfOutline.childs) && Objects.equals(this.count, pdfOutline.count)
        && Objects.equals(this.level, pdfOutline.level) && Objects.equals(this.title, pdfOutline.title)
        && Objects.equals(this.bottom, pdfOutline.bottom) && Objects.equals(this.left, pdfOutline.left)
        && Objects.equals(this.pageNo, pdfOutline.pageNo) && Objects.equals(this.right, pdfOutline.right)
        && Objects.equals(this.top, pdfOutline.top) && Objects.equals(this.type, pdfOutline.type)
        && Objects.equals(this.zoom, pdfOutline.zoom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(childs, count, level, title, bottom, left, pageNo, right, top, type, zoom);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfOutline {\n");

    sb.append("    childs: ").append(toIndentedString(childs)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    bottom: ").append(toIndentedString(bottom)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    pageNo: ").append(toIndentedString(pageNo)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    zoom: ").append(toIndentedString(zoom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

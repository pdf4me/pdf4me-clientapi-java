/*
 * Pdf4me
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import model.DocLog;
import model.DocMetadata;
import model.MergeData;
import model.Page;
import model.ScanPage;

/**
 * DocGenDocument
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-07-02T11:08:16.145Z")
public class DocGenDocument {
  @SerializedName("mergeData")
  private MergeData mergeData = null;

  @SerializedName("Paper")
  private String paper = null;

  /**
   * Gets or Sets printMode
   */
  @JsonAdapter(PrintModeEnum.Adapter.class)
  public enum PrintModeEnum {
    UNDEF("undef"),

    SIMPLEX("simplex"),

    DUPLEX("duplex");

    private String value;

    PrintModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrintModeEnum fromValue(String text) {
      for (PrintModeEnum b : PrintModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PrintModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrintModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrintModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PrintModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("printMode")
  private PrintModeEnum printMode = null;

  @SerializedName("documentId")
  private String documentId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("fileName")
  private String fileName = null;

  @SerializedName("fileExtension")
  private String fileExtension = null;

  @SerializedName("docStatus")
  private String docStatus = null;

  @SerializedName("pages")
  private List<Page> pages = null;

  @SerializedName("docData")
  private byte[] docData = null;

  @SerializedName("docMetadata")
  private DocMetadata docMetadata = null;

  @SerializedName("docLogs")
  private List<DocLog> docLogs = null;

  @SerializedName("documentUrl")
  private String documentUrl = null;

  @SerializedName("scanPages")
  private List<ScanPage> scanPages = null;

  @SerializedName("order")
  private Integer order = null;

  public DocGenDocument mergeData(MergeData mergeData) {
    this.mergeData = mergeData;
    return this;
  }

  /**
   * Get mergeData
   * 
   * @return mergeData
   **/
  @ApiModelProperty(value = "")
  public MergeData getMergeData() {
    return mergeData;
  }

  public void setMergeData(MergeData mergeData) {
    this.mergeData = mergeData;
  }

  public DocGenDocument paper(String paper) {
    this.paper = paper;
    return this;
  }

  /**
   * Get paper
   * 
   * @return paper
   **/
  @ApiModelProperty(value = "")
  public String getPaper() {
    return paper;
  }

  public void setPaper(String paper) {
    this.paper = paper;
  }

  public DocGenDocument printMode(PrintModeEnum printMode) {
    this.printMode = printMode;
    return this;
  }

  /**
   * Get printMode
   * 
   * @return printMode
   **/
  @ApiModelProperty(value = "")
  public PrintModeEnum getPrintMode() {
    return printMode;
  }

  public void setPrintMode(PrintModeEnum printMode) {
    this.printMode = printMode;
  }

  public DocGenDocument documentId(String documentId) {
    this.documentId = documentId;
    return this;
  }

  /**
   * DocumentId
   * 
   * @return documentId
   **/
  @ApiModelProperty(value = "DocumentId")
  public String getDocumentId() {
    return documentId;
  }

  public void setDocumentId(String documentId) {
    this.documentId = documentId;
  }

  public DocGenDocument name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Give filename inlcuding filetype
   * 
   * @return name
   **/
  @ApiModelProperty(value = "Give filename inlcuding filetype")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DocGenDocument fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * Get fileName
   * 
   * @return fileName
   **/
  @ApiModelProperty(value = "")
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public DocGenDocument fileExtension(String fileExtension) {
    this.fileExtension = fileExtension;
    return this;
  }

  /**
   * Get fileExtension
   * 
   * @return fileExtension
   **/
  @ApiModelProperty(value = "")
  public String getFileExtension() {
    return fileExtension;
  }

  public void setFileExtension(String fileExtension) {
    this.fileExtension = fileExtension;
  }

  public DocGenDocument docStatus(String docStatus) {
    this.docStatus = docStatus;
    return this;
  }

  /**
   * Returns the Status of the Document
   * 
   * @return docStatus
   **/
  @ApiModelProperty(value = "Returns the Status of the Document")
  public String getDocStatus() {
    return docStatus;
  }

  public void setDocStatus(String docStatus) {
    this.docStatus = docStatus;
  }

  public DocGenDocument pages(List<Page> pages) {
    this.pages = pages;
    return this;
  }

  public DocGenDocument addPagesItem(Page pagesItem) {
    if (this.pages == null) {
      this.pages = new ArrayList<Page>();
    }
    this.pages.add(pagesItem);
    return this;
  }

  /**
   * Description of pages
   * 
   * @return pages
   **/
  @ApiModelProperty(value = "Description of pages")
  public List<Page> getPages() {
    return pages;
  }

  public void setPages(List<Page> pages) {
    this.pages = pages;
  }

  public DocGenDocument docData(byte[] docData) {
    this.docData = docData;
    return this;
  }

  /**
   * Get docData
   * 
   * @return docData
   **/
  @ApiModelProperty(value = "")
  public byte[] getDocData() {
    return docData;
  }

  public void setDocData(byte[] docData) {
    this.docData = docData;
  }

  public DocGenDocument docMetadata(DocMetadata docMetadata) {
    this.docMetadata = docMetadata;
    return this;
  }

  /**
   * Get docMetadata
   * 
   * @return docMetadata
   **/
  @ApiModelProperty(value = "")
  public DocMetadata getDocMetadata() {
    return docMetadata;
  }

  public void setDocMetadata(DocMetadata docMetadata) {
    this.docMetadata = docMetadata;
  }

  public DocGenDocument docLogs(List<DocLog> docLogs) {
    this.docLogs = docLogs;
    return this;
  }

  public DocGenDocument addDocLogsItem(DocLog docLogsItem) {
    if (this.docLogs == null) {
      this.docLogs = new ArrayList<DocLog>();
    }
    this.docLogs.add(docLogsItem);
    return this;
  }

  /**
   * Get docLogs
   * 
   * @return docLogs
   **/
  @ApiModelProperty(value = "")
  public List<DocLog> getDocLogs() {
    return docLogs;
  }

  public void setDocLogs(List<DocLog> docLogs) {
    this.docLogs = docLogs;
  }

  public DocGenDocument documentUrl(String documentUrl) {
    this.documentUrl = documentUrl;
    return this;
  }

  /**
   * Get documentUrl
   * 
   * @return documentUrl
   **/
  @ApiModelProperty(value = "")
  public String getDocumentUrl() {
    return documentUrl;
  }

  public void setDocumentUrl(String documentUrl) {
    this.documentUrl = documentUrl;
  }

  public DocGenDocument scanPages(List<ScanPage> scanPages) {
    this.scanPages = scanPages;
    return this;
  }

  public DocGenDocument addScanPagesItem(ScanPage scanPagesItem) {
    if (this.scanPages == null) {
      this.scanPages = new ArrayList<ScanPage>();
    }
    this.scanPages.add(scanPagesItem);
    return this;
  }

  /**
   * Get scanPages
   * 
   * @return scanPages
   **/
  @ApiModelProperty(value = "")
  public List<ScanPage> getScanPages() {
    return scanPages;
  }

  public void setScanPages(List<ScanPage> scanPages) {
    this.scanPages = scanPages;
  }

  public DocGenDocument order(Integer order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * 
   * @return order
   **/
  @ApiModelProperty(value = "")
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocGenDocument docGenDocument = (DocGenDocument) o;
    return Objects.equals(this.mergeData, docGenDocument.mergeData) && Objects.equals(this.paper, docGenDocument.paper)
        && Objects.equals(this.printMode, docGenDocument.printMode)
        && Objects.equals(this.documentId, docGenDocument.documentId) && Objects.equals(this.name, docGenDocument.name)
        && Objects.equals(this.fileName, docGenDocument.fileName)
        && Objects.equals(this.fileExtension, docGenDocument.fileExtension)
        && Objects.equals(this.docStatus, docGenDocument.docStatus) && Objects.equals(this.pages, docGenDocument.pages)
        && Arrays.equals(this.docData, docGenDocument.docData)
        && Objects.equals(this.docMetadata, docGenDocument.docMetadata)
        && Objects.equals(this.docLogs, docGenDocument.docLogs)
        && Objects.equals(this.documentUrl, docGenDocument.documentUrl)
        && Objects.equals(this.scanPages, docGenDocument.scanPages) && Objects.equals(this.order, docGenDocument.order);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mergeData, paper, printMode, documentId, name, fileName, fileExtension, docStatus, pages,
        Arrays.hashCode(docData), docMetadata, docLogs, documentUrl, scanPages, order);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocGenDocument {\n");

    sb.append("    mergeData: ").append(toIndentedString(mergeData)).append("\n");
    sb.append("    paper: ").append(toIndentedString(paper)).append("\n");
    sb.append("    printMode: ").append(toIndentedString(printMode)).append("\n");
    sb.append("    documentId: ").append(toIndentedString(documentId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileExtension: ").append(toIndentedString(fileExtension)).append("\n");
    sb.append("    docStatus: ").append(toIndentedString(docStatus)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    docData: ").append(toIndentedString(docData)).append("\n");
    sb.append("    docMetadata: ").append(toIndentedString(docMetadata)).append("\n");
    sb.append("    docLogs: ").append(toIndentedString(docLogs)).append("\n");
    sb.append("    documentUrl: ").append(toIndentedString(documentUrl)).append("\n");
    sb.append("    scanPages: ").append(toIndentedString(scanPages)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * DmsApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import model.CustomCMSConfig;
import model.PageSelection;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ImageAction
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T13:33:59.770+02:00")
public class ImageAction {
  @SerializedName("pageSelection")
  private PageSelection pageSelection = null;

  @SerializedName("center")
  private Boolean center = null;

  @SerializedName("fitPage")
  private Boolean fitPage = null;

  @SerializedName("bitsPerPixel")
  private Integer bitsPerPixel = null;

  @SerializedName("bilevelThreshold")
  private Integer bilevelThreshold = null;

  @SerializedName("widthPixel")
  private Integer widthPixel = null;

  @SerializedName("heightPixel")
  private Integer heightPixel = null;

  @SerializedName("widthPoint")
  private Integer widthPoint = null;

  @SerializedName("heightPoint")
  private Integer heightPoint = null;

  /**
   * Gets or Sets renderOptions
   */
  @JsonAdapter(RenderOptionsEnum.Adapter.class)
  public enum RenderOptionsEnum {
    NOANTIALIASING("noAntialiasing"),
    
    NOINTERPOLATION("noInterpolation"),
    
    NOLOWPASSFILTER("noLowPassFilter"),
    
    NOHINTING("noHinting"),
    
    PRINTINGMODE("printingMode"),
    
    NOBPC("noBPC"),
    
    FITPATHS("fitPaths"),
    
    USEBOXFILTER("useBoxFilter");

    private String value;

    RenderOptionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RenderOptionsEnum fromValue(String text) {
      for (RenderOptionsEnum b : RenderOptionsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RenderOptionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RenderOptionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RenderOptionsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RenderOptionsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("renderOptions")
  private List<RenderOptionsEnum> renderOptions = null;

  /**
   * Set the rotation mode of the page.    Attribute: Set the rotation to the viewing rotation attribute of the PDF page, i.e. rendering the  page with the same rotation as it is displayed in a PDF viewer.    {default: Attribute}
   */
  @JsonAdapter(RotateModeEnum.Adapter.class)
  public enum RotateModeEnum {
    NONE("none"),
    
    ATTRIBUTE("attribute"),
    
    PORTRAIT("portrait"),
    
    LANDSCAPE("landscape");

    private String value;

    RotateModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RotateModeEnum fromValue(String text) {
      for (RotateModeEnum b : RotateModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RotateModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RotateModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RotateModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RotateModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("rotateMode")
  private RotateModeEnum rotateMode = null;

  @SerializedName("preserveAspectRatio")
  private Boolean preserveAspectRatio = null;

  @SerializedName("imageQuality")
  private Integer imageQuality = null;

  /**
   * Set the Color Management System (CMS) Engine.     {default: 80}
   */
  @JsonAdapter(CmsEngineEnum.Adapter.class)
  public enum CmsEngineEnum {
    NONE("none"),
    
    NEUGEBAUER("neugebauer"),
    
    LCMS("lcms"),
    
    CUSTOMCMS("customCMS");

    private String value;

    CmsEngineEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CmsEngineEnum fromValue(String text) {
      for (CmsEngineEnum b : CmsEngineEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CmsEngineEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CmsEngineEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CmsEngineEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CmsEngineEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("cmsEngine")
  private CmsEngineEnum cmsEngine = null;

  @SerializedName("customCMSConfig")
  private CustomCMSConfig customCMSConfig = null;

  /**
   * Set the dithering algorithm.Dithering refers to the procedure of simulating colors or grayscales.This is mainly  useful for low color depth (e.g.black and white or indexed) images.  The supported values for TPDFDithering are listed in the corresponding enumeration.  {default: DitherFloydSteinberg}
   */
  @JsonAdapter(DitheringEnum.Adapter.class)
  public enum DitheringEnum {
    NONE("none"),
    
    FLOYDSTEINBERG("floydSteinberg"),
    
    HALFTONE("halftone"),
    
    PATTERN("pattern"),
    
    G3OPTIMIZED("g3Optimized"),
    
    G4OPTIMIZED("g4Optimized"),
    
    ATKINSON("atkinson");

    private String value;

    DitheringEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DitheringEnum fromValue(String text) {
      for (DitheringEnum b : DitheringEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DitheringEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DitheringEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DitheringEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DitheringEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("dithering")
  private DitheringEnum dithering = null;

  @SerializedName("dpi")
  private Integer dpi = null;

  /**
   * Set the bit fill order.  MSB (Most significant bit) or LSB (Least significant bit) first.    {default: MostSignificantBit}
   */
  @JsonAdapter(FillOrderEnum.Adapter.class)
  public enum FillOrderEnum {
    MSB("mSB"),
    
    LSB("lSB");

    private String value;

    FillOrderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FillOrderEnum fromValue(String text) {
      for (FillOrderEnum b : FillOrderEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FillOrderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FillOrderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FillOrderEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FillOrderEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("fillOrder")
  private FillOrderEnum fillOrder = null;

  @SerializedName("filterRatio")
  private Integer filterRatio = null;

  /**
   * Set output Type for image file.
   */
  @JsonAdapter(ImageExtensionEnum.Adapter.class)
  public enum ImageExtensionEnum {
    UNKNOWN("unknown"),
    
    BMP("bmp"),
    
    GIF("gif"),
    
    JB2("jb2"),
    
    JPG("jpg"),
    
    JPEG("jpeg"),
    
    JP2("jp2"),
    
    JPF("jpf"),
    
    JPX("jpx"),
    
    PNG("png"),
    
    TIF("tif"),
    
    TIFF("tiff");

    private String value;

    ImageExtensionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImageExtensionEnum fromValue(String text) {
      for (ImageExtensionEnum b : ImageExtensionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ImageExtensionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImageExtensionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImageExtensionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ImageExtensionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("imageExtension")
  private ImageExtensionEnum imageExtension = null;

  /**
   * Set color space of the output image, see enumeration TPDFColorSpace.  For black white bi-tonal images, a gray color space must be selected    {default: ColorRGB}
   */
  @JsonAdapter(ColorSpaceEnum.Adapter.class)
  public enum ColorSpaceEnum {
    GRAY("gray"),
    
    GRAYA("grayA"),
    
    RGB("rGB"),
    
    RGBA("rGBA"),
    
    CMYK("cMYK"),
    
    YCBCR("yCbCr"),
    
    YCBCRK("yCbCrK"),
    
    PALETTE("palette"),
    
    LAB("lAB"),
    
    CMYK_KONLY("cMYK_Konly"),
    
    CMYKA("cMYKA"),
    
    OTHER("other");

    private String value;

    ColorSpaceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ColorSpaceEnum fromValue(String text) {
      for (ColorSpaceEnum b : ColorSpaceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ColorSpaceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorSpaceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ColorSpaceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ColorSpaceEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("colorSpace")
  private ColorSpaceEnum colorSpace = null;

  /**
   * Get or set the compression type of TIFF images. For any other image format, the compression is automatically  defined by the file extension(the file name).  The supported values for TPDFCompression are listed in the corresponding enumeration.                {default: ComprLZW}
   */
  @JsonAdapter(CompressionEnum.Adapter.class)
  public enum CompressionEnum {
    RAW("raw"),
    
    JPEG("jPEG"),
    
    FLATE("flate"),
    
    LZW("lZW"),
    
    GROUP3("group3"),
    
    GROUP3_2D("group3_2D"),
    
    GROUP4("group4"),
    
    JBIG2("jBIG2"),
    
    JPEG2000("jPEG2000"),
    
    TIFFJPEG("tIFFJPEG"),
    
    UNKNOWN("unknown"),
    
    DEFAULT("default");

    private String value;

    CompressionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompressionEnum fromValue(String text) {
      for (CompressionEnum b : CompressionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CompressionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompressionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompressionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CompressionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("compression")
  private CompressionEnum compression = null;

  public ImageAction pageSelection(PageSelection pageSelection) {
    this.pageSelection = pageSelection;
    return this;
  }

   /**
   * Set the Pages wo apply the convertion.    {default: PageSelection.All}
   * @return pageSelection
  **/
  @ApiModelProperty(value = "Set the Pages wo apply the convertion.    {default: PageSelection.All}")
  public PageSelection getPageSelection() {
    return pageSelection;
  }

  public void setPageSelection(PageSelection pageSelection) {
    this.pageSelection = pageSelection;
  }

  public ImageAction center(Boolean center) {
    this.center = center;
    return this;
  }

   /**
   * Set or get the center mode. When set to True, the document is horizontally and vertically centered on the page.  When set to False, the document is printed to the upper left corner of the page.    {default: false}
   * @return center
  **/
  @ApiModelProperty(value = "Set or get the center mode. When set to True, the document is horizontally and vertically centered on the page.  When set to False, the document is printed to the upper left corner of the page.    {default: false}")
  public Boolean isCenter() {
    return center;
  }

  public void setCenter(Boolean center) {
    this.center = center;
  }

  public ImageAction fitPage(Boolean fitPage) {
    this.fitPage = fitPage;
    return this;
  }

   /**
   * set the fit page mode. If set to True, the page is scaled to fit the image (in either width or height). If set to  False, the page is rendered with its true size.  {default: true}
   * @return fitPage
  **/
  @ApiModelProperty(value = "set the fit page mode. If set to True, the page is scaled to fit the image (in either width or height). If set to  False, the page is rendered with its true size.  {default: true}")
  public Boolean isFitPage() {
    return fitPage;
  }

  public void setFitPage(Boolean fitPage) {
    this.fitPage = fitPage;
  }

  public ImageAction bitsPerPixel(Integer bitsPerPixel) {
    this.bitsPerPixel = bitsPerPixel;
    return this;
  }

   /**
   * Get or set the color depth. Bi-tonal: 1, gray scale: 8, RGB true color: 24, CMYK: 32.    {default: 24}
   * @return bitsPerPixel
  **/
  @ApiModelProperty(value = "Get or set the color depth. Bi-tonal: 1, gray scale: 8, RGB true color: 24, CMYK: 32.    {default: 24}")
  public Integer getBitsPerPixel() {
    return bitsPerPixel;
  }

  public void setBitsPerPixel(Integer bitsPerPixel) {
    this.bitsPerPixel = bitsPerPixel;
  }

  public ImageAction bilevelThreshold(Integer bilevelThreshold) {
    this.bilevelThreshold = bilevelThreshold;
    return this;
  }

   /**
   * Set the threshold for converting from gray to bi-tonal when Dithering is eDitherNone. Value must be in  the range of 0 to 255.    {default: 181}
   * @return bilevelThreshold
  **/
  @ApiModelProperty(value = "Set the threshold for converting from gray to bi-tonal when Dithering is eDitherNone. Value must be in  the range of 0 to 255.    {default: 181}")
  public Integer getBilevelThreshold() {
    return bilevelThreshold;
  }

  public void setBilevelThreshold(Integer bilevelThreshold) {
    this.bilevelThreshold = bilevelThreshold;
  }

  public ImageAction widthPixel(Integer widthPixel) {
    this.widthPixel = widthPixel;
    return this;
  }

   /**
   * Get widthPixel
   * @return widthPixel
  **/
  @ApiModelProperty(value = "")
  public Integer getWidthPixel() {
    return widthPixel;
  }

  public void setWidthPixel(Integer widthPixel) {
    this.widthPixel = widthPixel;
  }

  public ImageAction heightPixel(Integer heightPixel) {
    this.heightPixel = heightPixel;
    return this;
  }

   /**
   * Get heightPixel
   * @return heightPixel
  **/
  @ApiModelProperty(value = "")
  public Integer getHeightPixel() {
    return heightPixel;
  }

  public void setHeightPixel(Integer heightPixel) {
    this.heightPixel = heightPixel;
  }

  public ImageAction widthPoint(Integer widthPoint) {
    this.widthPoint = widthPoint;
    return this;
  }

   /**
   * Get widthPoint
   * @return widthPoint
  **/
  @ApiModelProperty(value = "")
  public Integer getWidthPoint() {
    return widthPoint;
  }

  public void setWidthPoint(Integer widthPoint) {
    this.widthPoint = widthPoint;
  }

  public ImageAction heightPoint(Integer heightPoint) {
    this.heightPoint = heightPoint;
    return this;
  }

   /**
   * Get heightPoint
   * @return heightPoint
  **/
  @ApiModelProperty(value = "")
  public Integer getHeightPoint() {
    return heightPoint;
  }

  public void setHeightPoint(Integer heightPoint) {
    this.heightPoint = heightPoint;
  }

  public ImageAction renderOptions(List<RenderOptionsEnum> renderOptions) {
    this.renderOptions = renderOptions;
    return this;
  }

  public ImageAction addRenderOptionsItem(RenderOptionsEnum renderOptionsItem) {
    if (this.renderOptions == null) {
      this.renderOptions = new ArrayList<RenderOptionsEnum>();
    }
    this.renderOptions.add(renderOptionsItem);
    return this;
  }

   /**
   * Set a specific rendering option.
   * @return renderOptions
  **/
  @ApiModelProperty(value = "Set a specific rendering option.")
  public List<RenderOptionsEnum> getRenderOptions() {
    return renderOptions;
  }

  public void setRenderOptions(List<RenderOptionsEnum> renderOptions) {
    this.renderOptions = renderOptions;
  }

  public ImageAction rotateMode(RotateModeEnum rotateMode) {
    this.rotateMode = rotateMode;
    return this;
  }

   /**
   * Set the rotation mode of the page.    Attribute: Set the rotation to the viewing rotation attribute of the PDF page, i.e. rendering the  page with the same rotation as it is displayed in a PDF viewer.    {default: Attribute}
   * @return rotateMode
  **/
  @ApiModelProperty(value = "Set the rotation mode of the page.    Attribute: Set the rotation to the viewing rotation attribute of the PDF page, i.e. rendering the  page with the same rotation as it is displayed in a PDF viewer.    {default: Attribute}")
  public RotateModeEnum getRotateMode() {
    return rotateMode;
  }

  public void setRotateMode(RotateModeEnum rotateMode) {
    this.rotateMode = rotateMode;
  }

  public ImageAction preserveAspectRatio(Boolean preserveAspectRatio) {
    this.preserveAspectRatio = preserveAspectRatio;
    return this;
  }

   /**
   * If True a uniform up- or down-scaling is applied, i.e. the output image has the same ratio of width to height as the  input file and its size will fit into the defined dimensions, given by SetBitmapDimensions.    {default: true}
   * @return preserveAspectRatio
  **/
  @ApiModelProperty(value = "If True a uniform up- or down-scaling is applied, i.e. the output image has the same ratio of width to height as the  input file and its size will fit into the defined dimensions, given by SetBitmapDimensions.    {default: true}")
  public Boolean isPreserveAspectRatio() {
    return preserveAspectRatio;
  }

  public void setPreserveAspectRatio(Boolean preserveAspectRatio) {
    this.preserveAspectRatio = preserveAspectRatio;
  }

  public ImageAction imageQuality(Integer imageQuality) {
    this.imageQuality = imageQuality;
    return this;
  }

   /**
   * Set the quality index of lossy compression types. This value ranges from 1 to 100 and is applied to JPEG and  JPEG2000 compression.For JPEG2000, a quality index of 100 means lossless compression.JPEG compression is  always lossy.    {default: 80}
   * @return imageQuality
  **/
  @ApiModelProperty(value = "Set the quality index of lossy compression types. This value ranges from 1 to 100 and is applied to JPEG and  JPEG2000 compression.For JPEG2000, a quality index of 100 means lossless compression.JPEG compression is  always lossy.    {default: 80}")
  public Integer getImageQuality() {
    return imageQuality;
  }

  public void setImageQuality(Integer imageQuality) {
    this.imageQuality = imageQuality;
  }

  public ImageAction cmsEngine(CmsEngineEnum cmsEngine) {
    this.cmsEngine = cmsEngine;
    return this;
  }

   /**
   * Set the Color Management System (CMS) Engine.     {default: 80}
   * @return cmsEngine
  **/
  @ApiModelProperty(value = "Set the Color Management System (CMS) Engine.     {default: 80}")
  public CmsEngineEnum getCmsEngine() {
    return cmsEngine;
  }

  public void setCmsEngine(CmsEngineEnum cmsEngine) {
    this.cmsEngine = cmsEngine;
  }

  public ImageAction customCMSConfig(CustomCMSConfig customCMSConfig) {
    this.customCMSConfig = customCMSConfig;
    return this;
  }

   /**
   * Set the Color Management System (CMS) Engine.     {default: 80}
   * @return customCMSConfig
  **/
  @ApiModelProperty(value = "Set the Color Management System (CMS) Engine.     {default: 80}")
  public CustomCMSConfig getCustomCMSConfig() {
    return customCMSConfig;
  }

  public void setCustomCMSConfig(CustomCMSConfig customCMSConfig) {
    this.customCMSConfig = customCMSConfig;
  }

  public ImageAction dithering(DitheringEnum dithering) {
    this.dithering = dithering;
    return this;
  }

   /**
   * Set the dithering algorithm.Dithering refers to the procedure of simulating colors or grayscales.This is mainly  useful for low color depth (e.g.black and white or indexed) images.  The supported values for TPDFDithering are listed in the corresponding enumeration.  {default: DitherFloydSteinberg}
   * @return dithering
  **/
  @ApiModelProperty(value = "Set the dithering algorithm.Dithering refers to the procedure of simulating colors or grayscales.This is mainly  useful for low color depth (e.g.black and white or indexed) images.  The supported values for TPDFDithering are listed in the corresponding enumeration.  {default: DitherFloydSteinberg}")
  public DitheringEnum getDithering() {
    return dithering;
  }

  public void setDithering(DitheringEnum dithering) {
    this.dithering = dithering;
  }

  public ImageAction dpi(Integer dpi) {
    this.dpi = dpi;
    return this;
  }

   /**
   * &lt;p&gt;              Get or set the resolution of the image in DPI (dots per inch).              Set Both the resolutions for the x- and y-axis are set to the same value.              &lt;/p&gt;  &lt;p&gt;              Setting DPI is redundant to setting the specialized properties XDPI and YDPI.              &lt;/p&gt;  {default: 150}
   * @return dpi
  **/
  @ApiModelProperty(value = "<p>              Get or set the resolution of the image in DPI (dots per inch).              Set Both the resolutions for the x- and y-axis are set to the same value.              </p>  <p>              Setting DPI is redundant to setting the specialized properties XDPI and YDPI.              </p>  {default: 150}")
  public Integer getDpi() {
    return dpi;
  }

  public void setDpi(Integer dpi) {
    this.dpi = dpi;
  }

  public ImageAction fillOrder(FillOrderEnum fillOrder) {
    this.fillOrder = fillOrder;
    return this;
  }

   /**
   * Set the bit fill order.  MSB (Most significant bit) or LSB (Least significant bit) first.    {default: MostSignificantBit}
   * @return fillOrder
  **/
  @ApiModelProperty(value = "Set the bit fill order.  MSB (Most significant bit) or LSB (Least significant bit) first.    {default: MostSignificantBit}")
  public FillOrderEnum getFillOrder() {
    return fillOrder;
  }

  public void setFillOrder(FillOrderEnum fillOrder) {
    this.fillOrder = fillOrder;
  }

  public ImageAction filterRatio(Integer filterRatio) {
    this.filterRatio = filterRatio;
    return this;
  }

   /**
   * &lt;p&gt;              This property is used to enable and parameterize super-sampling, a technique to initially render the image at a              higher resolution and then sample it down to the target resolution.As a result of that process the final image              appears smoother, i.e.anti-aliased.              &lt;/p&gt;  &lt;p&gt;              Applying super-sampling improves the image quality when rendering at low target resolutions(72 DPI or less); the              higher the target resolution the less the visual impact.              This property requires memory and CPU time quadratically to the ratio, therefore only small values, such as 2 or 3              should be used.              &lt;/p&gt;  &lt;p&gt;              If a too high value (in combination with the original image size) is set, it is ignored.              &lt;/p&gt;  {default: 1}
   * @return filterRatio
  **/
  @ApiModelProperty(value = "<p>              This property is used to enable and parameterize super-sampling, a technique to initially render the image at a              higher resolution and then sample it down to the target resolution.As a result of that process the final image              appears smoother, i.e.anti-aliased.              </p>  <p>              Applying super-sampling improves the image quality when rendering at low target resolutions(72 DPI or less); the              higher the target resolution the less the visual impact.              This property requires memory and CPU time quadratically to the ratio, therefore only small values, such as 2 or 3              should be used.              </p>  <p>              If a too high value (in combination with the original image size) is set, it is ignored.              </p>  {default: 1}")
  public Integer getFilterRatio() {
    return filterRatio;
  }

  public void setFilterRatio(Integer filterRatio) {
    this.filterRatio = filterRatio;
  }

  public ImageAction imageExtension(ImageExtensionEnum imageExtension) {
    this.imageExtension = imageExtension;
    return this;
  }

   /**
   * Set output Type for image file.
   * @return imageExtension
  **/
  @ApiModelProperty(value = "Set output Type for image file.")
  public ImageExtensionEnum getImageExtension() {
    return imageExtension;
  }

  public void setImageExtension(ImageExtensionEnum imageExtension) {
    this.imageExtension = imageExtension;
  }

  public ImageAction colorSpace(ColorSpaceEnum colorSpace) {
    this.colorSpace = colorSpace;
    return this;
  }

   /**
   * Set color space of the output image, see enumeration TPDFColorSpace.  For black white bi-tonal images, a gray color space must be selected    {default: ColorRGB}
   * @return colorSpace
  **/
  @ApiModelProperty(value = "Set color space of the output image, see enumeration TPDFColorSpace.  For black white bi-tonal images, a gray color space must be selected    {default: ColorRGB}")
  public ColorSpaceEnum getColorSpace() {
    return colorSpace;
  }

  public void setColorSpace(ColorSpaceEnum colorSpace) {
    this.colorSpace = colorSpace;
  }

  public ImageAction compression(CompressionEnum compression) {
    this.compression = compression;
    return this;
  }

   /**
   * Get or set the compression type of TIFF images. For any other image format, the compression is automatically  defined by the file extension(the file name).  The supported values for TPDFCompression are listed in the corresponding enumeration.                {default: ComprLZW}
   * @return compression
  **/
  @ApiModelProperty(value = "Get or set the compression type of TIFF images. For any other image format, the compression is automatically  defined by the file extension(the file name).  The supported values for TPDFCompression are listed in the corresponding enumeration.                {default: ComprLZW}")
  public CompressionEnum getCompression() {
    return compression;
  }

  public void setCompression(CompressionEnum compression) {
    this.compression = compression;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageAction imageAction = (ImageAction) o;
    return Objects.equals(this.pageSelection, imageAction.pageSelection) &&
        Objects.equals(this.center, imageAction.center) &&
        Objects.equals(this.fitPage, imageAction.fitPage) &&
        Objects.equals(this.bitsPerPixel, imageAction.bitsPerPixel) &&
        Objects.equals(this.bilevelThreshold, imageAction.bilevelThreshold) &&
        Objects.equals(this.widthPixel, imageAction.widthPixel) &&
        Objects.equals(this.heightPixel, imageAction.heightPixel) &&
        Objects.equals(this.widthPoint, imageAction.widthPoint) &&
        Objects.equals(this.heightPoint, imageAction.heightPoint) &&
        Objects.equals(this.renderOptions, imageAction.renderOptions) &&
        Objects.equals(this.rotateMode, imageAction.rotateMode) &&
        Objects.equals(this.preserveAspectRatio, imageAction.preserveAspectRatio) &&
        Objects.equals(this.imageQuality, imageAction.imageQuality) &&
        Objects.equals(this.cmsEngine, imageAction.cmsEngine) &&
        Objects.equals(this.customCMSConfig, imageAction.customCMSConfig) &&
        Objects.equals(this.dithering, imageAction.dithering) &&
        Objects.equals(this.dpi, imageAction.dpi) &&
        Objects.equals(this.fillOrder, imageAction.fillOrder) &&
        Objects.equals(this.filterRatio, imageAction.filterRatio) &&
        Objects.equals(this.imageExtension, imageAction.imageExtension) &&
        Objects.equals(this.colorSpace, imageAction.colorSpace) &&
        Objects.equals(this.compression, imageAction.compression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageSelection, center, fitPage, bitsPerPixel, bilevelThreshold, widthPixel, heightPixel, widthPoint, heightPoint, renderOptions, rotateMode, preserveAspectRatio, imageQuality, cmsEngine, customCMSConfig, dithering, dpi, fillOrder, filterRatio, imageExtension, colorSpace, compression);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageAction {\n");
    
    sb.append("    pageSelection: ").append(toIndentedString(pageSelection)).append("\n");
    sb.append("    center: ").append(toIndentedString(center)).append("\n");
    sb.append("    fitPage: ").append(toIndentedString(fitPage)).append("\n");
    sb.append("    bitsPerPixel: ").append(toIndentedString(bitsPerPixel)).append("\n");
    sb.append("    bilevelThreshold: ").append(toIndentedString(bilevelThreshold)).append("\n");
    sb.append("    widthPixel: ").append(toIndentedString(widthPixel)).append("\n");
    sb.append("    heightPixel: ").append(toIndentedString(heightPixel)).append("\n");
    sb.append("    widthPoint: ").append(toIndentedString(widthPoint)).append("\n");
    sb.append("    heightPoint: ").append(toIndentedString(heightPoint)).append("\n");
    sb.append("    renderOptions: ").append(toIndentedString(renderOptions)).append("\n");
    sb.append("    rotateMode: ").append(toIndentedString(rotateMode)).append("\n");
    sb.append("    preserveAspectRatio: ").append(toIndentedString(preserveAspectRatio)).append("\n");
    sb.append("    imageQuality: ").append(toIndentedString(imageQuality)).append("\n");
    sb.append("    cmsEngine: ").append(toIndentedString(cmsEngine)).append("\n");
    sb.append("    customCMSConfig: ").append(toIndentedString(customCMSConfig)).append("\n");
    sb.append("    dithering: ").append(toIndentedString(dithering)).append("\n");
    sb.append("    dpi: ").append(toIndentedString(dpi)).append("\n");
    sb.append("    fillOrder: ").append(toIndentedString(fillOrder)).append("\n");
    sb.append("    filterRatio: ").append(toIndentedString(filterRatio)).append("\n");
    sb.append("    imageExtension: ").append(toIndentedString(imageExtension)).append("\n");
    sb.append("    colorSpace: ").append(toIndentedString(colorSpace)).append("\n");
    sb.append("    compression: ").append(toIndentedString(compression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


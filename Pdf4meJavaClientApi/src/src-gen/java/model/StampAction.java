/*
 * DmsApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import model.Image;
import model.Text;
import java.io.IOException;

/**
 * Define Stamp to place on Document
 */
@ApiModel(description = "Define Stamp to place on Document")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-04-19T13:33:59.770+02:00")
public class StampAction {
  @SerializedName("name")
  private String name = null;

  @SerializedName("pageSequence")
  private String pageSequence = null;

  @SerializedName("relativePosX")
  private Integer relativePosX = null;

  @SerializedName("relativePosY")
  private Integer relativePosY = null;

  @SerializedName("sizeX")
  private Integer sizeX = null;

  @SerializedName("sizeY")
  private Integer sizeY = null;

  @SerializedName("rotate")
  private Double rotate = null;

  @SerializedName("autoorientation")
  private Boolean autoorientation = null;

  @SerializedName("alpha")
  private Double alpha = null;

  /**
   * Modify scale of stamp. Allowed values for ‹scale_set› are:   - relToA4: Scale the stamp relative to the page size. For example, make stamp half as large on a A5 and  twice as large on a A3 page as specified.
   */
  @JsonAdapter(ScaleEnum.Adapter.class)
  public enum ScaleEnum {
    RELTOA4("relToA4");

    private String value;

    ScaleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScaleEnum fromValue(String text) {
      for (ScaleEnum b : ScaleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ScaleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScaleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScaleEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ScaleEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("scale")
  private ScaleEnum scale = null;

  /**
   * Gets or Sets alignX
   */
  @JsonAdapter(AlignXEnum.Adapter.class)
  public enum AlignXEnum {
    LEFT("left"),
    
    CENTER("center"),
    
    RIGHT("right");

    private String value;

    AlignXEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlignXEnum fromValue(String text) {
      for (AlignXEnum b : AlignXEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AlignXEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlignXEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlignXEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AlignXEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("alignX")
  private AlignXEnum alignX = null;

  /**
   * Gets or Sets alignY
   */
  @JsonAdapter(AlignYEnum.Adapter.class)
  public enum AlignYEnum {
    TOP("top"),
    
    MIDDLE("middle"),
    
    BOTTOM("bottom");

    private String value;

    AlignYEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlignYEnum fromValue(String text) {
      for (AlignYEnum b : AlignYEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AlignYEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlignYEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlignYEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AlignYEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("alignY")
  private AlignYEnum alignY = null;

  /**
   * Gets or Sets stampType
   */
  @JsonAdapter(StampTypeEnum.Adapter.class)
  public enum StampTypeEnum {
    ANNOTATION("annotation"),
    
    FOREGROUND("foreground"),
    
    BACKGROUND("background");

    private String value;

    StampTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StampTypeEnum fromValue(String text) {
      for (StampTypeEnum b : StampTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StampTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StampTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StampTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StampTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("stampType")
  private StampTypeEnum stampType = null;

  @SerializedName("text")
  private Text text = null;

  @SerializedName("image")
  private Image image = null;

  public StampAction name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public StampAction pageSequence(String pageSequence) {
    this.pageSequence = pageSequence;
    return this;
  }

   /**
   * Get pageSequence
   * @return pageSequence
  **/
  @ApiModelProperty(value = "")
  public String getPageSequence() {
    return pageSequence;
  }

  public void setPageSequence(String pageSequence) {
    this.pageSequence = pageSequence;
  }

  public StampAction relativePosX(Integer relativePosX) {
    this.relativePosX = relativePosX;
    return this;
  }

   /**
   * Get relativePosX
   * @return relativePosX
  **/
  @ApiModelProperty(value = "")
  public Integer getRelativePosX() {
    return relativePosX;
  }

  public void setRelativePosX(Integer relativePosX) {
    this.relativePosX = relativePosX;
  }

  public StampAction relativePosY(Integer relativePosY) {
    this.relativePosY = relativePosY;
    return this;
  }

   /**
   * Get relativePosY
   * @return relativePosY
  **/
  @ApiModelProperty(value = "")
  public Integer getRelativePosY() {
    return relativePosY;
  }

  public void setRelativePosY(Integer relativePosY) {
    this.relativePosY = relativePosY;
  }

  public StampAction sizeX(Integer sizeX) {
    this.sizeX = sizeX;
    return this;
  }

   /**
   * Get sizeX
   * @return sizeX
  **/
  @ApiModelProperty(value = "")
  public Integer getSizeX() {
    return sizeX;
  }

  public void setSizeX(Integer sizeX) {
    this.sizeX = sizeX;
  }

  public StampAction sizeY(Integer sizeY) {
    this.sizeY = sizeY;
    return this;
  }

   /**
   * Get sizeY
   * @return sizeY
  **/
  @ApiModelProperty(value = "")
  public Integer getSizeY() {
    return sizeY;
  }

  public void setSizeY(Integer sizeY) {
    this.sizeY = sizeY;
  }

  public StampAction rotate(Double rotate) {
    this.rotate = rotate;
    return this;
  }

   /**
   * Get rotate
   * @return rotate
  **/
  @ApiModelProperty(value = "")
  public Double getRotate() {
    return rotate;
  }

  public void setRotate(Double rotate) {
    this.rotate = rotate;
  }

  public StampAction autoorientation(Boolean autoorientation) {
    this.autoorientation = autoorientation;
    return this;
  }

   /**
   * Get autoorientation
   * @return autoorientation
  **/
  @ApiModelProperty(value = "")
  public Boolean isAutoorientation() {
    return autoorientation;
  }

  public void setAutoorientation(Boolean autoorientation) {
    this.autoorientation = autoorientation;
  }

  public StampAction alpha(Double alpha) {
    this.alpha = alpha;
    return this;
  }

   /**
   * The opacity of the stamp as a whole. 1.0 for fully opaque, 0.0 for fully transparent.  Default: 1.0  The PDF/A-1 standard does not allow transparency.Therefore, for PDF/A-1 conforming input files you must  not set alpha to a value other than 1.0
   * @return alpha
  **/
  @ApiModelProperty(value = "The opacity of the stamp as a whole. 1.0 for fully opaque, 0.0 for fully transparent.  Default: 1.0  The PDF/A-1 standard does not allow transparency.Therefore, for PDF/A-1 conforming input files you must  not set alpha to a value other than 1.0")
  public Double getAlpha() {
    return alpha;
  }

  public void setAlpha(Double alpha) {
    this.alpha = alpha;
  }

  public StampAction scale(ScaleEnum scale) {
    this.scale = scale;
    return this;
  }

   /**
   * Modify scale of stamp. Allowed values for ‹scale_set› are:   - relToA4: Scale the stamp relative to the page size. For example, make stamp half as large on a A5 and  twice as large on a A3 page as specified.
   * @return scale
  **/
  @ApiModelProperty(value = "Modify scale of stamp. Allowed values for ‹scale_set› are:   - relToA4: Scale the stamp relative to the page size. For example, make stamp half as large on a A5 and  twice as large on a A3 page as specified.")
  public ScaleEnum getScale() {
    return scale;
  }

  public void setScale(ScaleEnum scale) {
    this.scale = scale;
  }

  public StampAction alignX(AlignXEnum alignX) {
    this.alignX = alignX;
    return this;
  }

   /**
   * Get alignX
   * @return alignX
  **/
  @ApiModelProperty(value = "")
  public AlignXEnum getAlignX() {
    return alignX;
  }

  public void setAlignX(AlignXEnum alignX) {
    this.alignX = alignX;
  }

  public StampAction alignY(AlignYEnum alignY) {
    this.alignY = alignY;
    return this;
  }

   /**
   * Get alignY
   * @return alignY
  **/
  @ApiModelProperty(value = "")
  public AlignYEnum getAlignY() {
    return alignY;
  }

  public void setAlignY(AlignYEnum alignY) {
    this.alignY = alignY;
  }

  public StampAction stampType(StampTypeEnum stampType) {
    this.stampType = stampType;
    return this;
  }

   /**
   * Get stampType
   * @return stampType
  **/
  @ApiModelProperty(value = "")
  public StampTypeEnum getStampType() {
    return stampType;
  }

  public void setStampType(StampTypeEnum stampType) {
    this.stampType = stampType;
  }

  public StampAction text(Text text) {
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @ApiModelProperty(value = "")
  public Text getText() {
    return text;
  }

  public void setText(Text text) {
    this.text = text;
  }

  public StampAction image(Image image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @ApiModelProperty(value = "")
  public Image getImage() {
    return image;
  }

  public void setImage(Image image) {
    this.image = image;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StampAction stampAction = (StampAction) o;
    return Objects.equals(this.name, stampAction.name) &&
        Objects.equals(this.pageSequence, stampAction.pageSequence) &&
        Objects.equals(this.relativePosX, stampAction.relativePosX) &&
        Objects.equals(this.relativePosY, stampAction.relativePosY) &&
        Objects.equals(this.sizeX, stampAction.sizeX) &&
        Objects.equals(this.sizeY, stampAction.sizeY) &&
        Objects.equals(this.rotate, stampAction.rotate) &&
        Objects.equals(this.autoorientation, stampAction.autoorientation) &&
        Objects.equals(this.alpha, stampAction.alpha) &&
        Objects.equals(this.scale, stampAction.scale) &&
        Objects.equals(this.alignX, stampAction.alignX) &&
        Objects.equals(this.alignY, stampAction.alignY) &&
        Objects.equals(this.stampType, stampAction.stampType) &&
        Objects.equals(this.text, stampAction.text) &&
        Objects.equals(this.image, stampAction.image);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, pageSequence, relativePosX, relativePosY, sizeX, sizeY, rotate, autoorientation, alpha, scale, alignX, alignY, stampType, text, image);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StampAction {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pageSequence: ").append(toIndentedString(pageSequence)).append("\n");
    sb.append("    relativePosX: ").append(toIndentedString(relativePosX)).append("\n");
    sb.append("    relativePosY: ").append(toIndentedString(relativePosY)).append("\n");
    sb.append("    sizeX: ").append(toIndentedString(sizeX)).append("\n");
    sb.append("    sizeY: ").append(toIndentedString(sizeY)).append("\n");
    sb.append("    rotate: ").append(toIndentedString(rotate)).append("\n");
    sb.append("    autoorientation: ").append(toIndentedString(autoorientation)).append("\n");
    sb.append("    alpha: ").append(toIndentedString(alpha)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    alignX: ").append(toIndentedString(alignX)).append("\n");
    sb.append("    alignY: ").append(toIndentedString(alignY)).append("\n");
    sb.append("    stampType: ").append(toIndentedString(stampType)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * Pdf4me
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;
import model.IntegrationConfig;
import org.threeten.bp.OffsetDateTime;

/**
 * Integration
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-07-02T11:08:16.145Z")
public class Integration {
  @SerializedName("integrationId")
  private String integrationId = null;

  @SerializedName("folder")
  private String folder = null;

  @SerializedName("integrationAlias")
  private String integrationAlias = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets integrationType
   */
  @JsonAdapter(IntegrationTypeEnum.Adapter.class)
  public enum IntegrationTypeEnum {
    NONE("none"),

    AZURESTORAGE("azureStorage"),

    ONEDRIVE("oneDrive"),

    SFTP("sFTP"),

    FTP("fTP"),

    AMAZONS3("amazonS3"),

    AMAZONGLACIER("amazonGlacier"),

    GOOGLECLOUD("googleCloud"),

    GOOGLEDRIVE("googleDrive"),

    WEBHOOK("webHook"),

    DROPBOX("dropbox"),

    AZUREBUS("azureBus"),

    AWSSQS("awsSQS"),

    AWSSNS("awsSNS"),

    AZUREEVENTHUB("azureEventHub"),

    SIGNINGSWISSQUOVADISSEALSIGN("signingSwissQuoVadisSealsign");

    private String value;

    IntegrationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntegrationTypeEnum fromValue(String text) {
      for (IntegrationTypeEnum b : IntegrationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IntegrationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntegrationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntegrationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IntegrationTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("integrationType")
  private IntegrationTypeEnum integrationType = null;

  @SerializedName("integrationConfig")
  private IntegrationConfig integrationConfig = null;

  @SerializedName("applicationId")
  private UUID applicationId = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("basicToken")
  private String basicToken = null;

  @SerializedName("modDate")
  private OffsetDateTime modDate = null;

  @SerializedName("modName")
  private String modName = null;

  @SerializedName("url")
  private String url = null;

  /**
   * Gets or Sets requestType
   */
  @JsonAdapter(RequestTypeEnum.Adapter.class)
  public enum RequestTypeEnum {
    NONE("none"),

    ALL("all"),

    ONREQUEST("onRequest");

    private String value;

    RequestTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequestTypeEnum fromValue(String text) {
      for (RequestTypeEnum b : RequestTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RequestTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RequestTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("requestType")
  private RequestTypeEnum requestType = null;

  @SerializedName("executionOrder")
  private Integer executionOrder = null;

  public Integration integrationId(String integrationId) {
    this.integrationId = integrationId;
    return this;
  }

  /**
   * Get integrationId
   * 
   * @return integrationId
   **/
  @ApiModelProperty(value = "")
  public String getIntegrationId() {
    return integrationId;
  }

  public void setIntegrationId(String integrationId) {
    this.integrationId = integrationId;
  }

  public Integration folder(String folder) {
    this.folder = folder;
    return this;
  }

  /**
   * Get folder
   * 
   * @return folder
   **/
  @ApiModelProperty(value = "")
  public String getFolder() {
    return folder;
  }

  public void setFolder(String folder) {
    this.folder = folder;
  }

  public Integration integrationAlias(String integrationAlias) {
    this.integrationAlias = integrationAlias;
    return this;
  }

  /**
   * Get integrationAlias
   * 
   * @return integrationAlias
   **/
  @ApiModelProperty(value = "")
  public String getIntegrationAlias() {
    return integrationAlias;
  }

  public void setIntegrationAlias(String integrationAlias) {
    this.integrationAlias = integrationAlias;
  }

  public Integration name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * 
   * @return name
   **/
  @ApiModelProperty(value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Integration integrationType(IntegrationTypeEnum integrationType) {
    this.integrationType = integrationType;
    return this;
  }

  /**
   * Get integrationType
   * 
   * @return integrationType
   **/
  @ApiModelProperty(value = "")
  public IntegrationTypeEnum getIntegrationType() {
    return integrationType;
  }

  public void setIntegrationType(IntegrationTypeEnum integrationType) {
    this.integrationType = integrationType;
  }

  public Integration integrationConfig(IntegrationConfig integrationConfig) {
    this.integrationConfig = integrationConfig;
    return this;
  }

  /**
   * Get integrationConfig
   * 
   * @return integrationConfig
   **/
  @ApiModelProperty(value = "")
  public IntegrationConfig getIntegrationConfig() {
    return integrationConfig;
  }

  public void setIntegrationConfig(IntegrationConfig integrationConfig) {
    this.integrationConfig = integrationConfig;
  }

  public Integration applicationId(UUID applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * Get applicationId
   * 
   * @return applicationId
   **/
  @ApiModelProperty(value = "")
  public UUID getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(UUID applicationId) {
    this.applicationId = applicationId;
  }

  public Integration enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * 
   * @return enabled
   **/
  @ApiModelProperty(value = "")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public Integration basicToken(String basicToken) {
    this.basicToken = basicToken;
    return this;
  }

  /**
   * Get basicToken
   * 
   * @return basicToken
   **/
  @ApiModelProperty(value = "")
  public String getBasicToken() {
    return basicToken;
  }

  public void setBasicToken(String basicToken) {
    this.basicToken = basicToken;
  }

  public Integration modDate(OffsetDateTime modDate) {
    this.modDate = modDate;
    return this;
  }

  /**
   * Get modDate
   * 
   * @return modDate
   **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getModDate() {
    return modDate;
  }

  public void setModDate(OffsetDateTime modDate) {
    this.modDate = modDate;
  }

  public Integration modName(String modName) {
    this.modName = modName;
    return this;
  }

  /**
   * Get modName
   * 
   * @return modName
   **/
  @ApiModelProperty(value = "")
  public String getModName() {
    return modName;
  }

  public void setModName(String modName) {
    this.modName = modName;
  }

  public Integration url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * 
   * @return url
   **/
  @ApiModelProperty(value = "")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public Integration requestType(RequestTypeEnum requestType) {
    this.requestType = requestType;
    return this;
  }

  /**
   * Get requestType
   * 
   * @return requestType
   **/
  @ApiModelProperty(value = "")
  public RequestTypeEnum getRequestType() {
    return requestType;
  }

  public void setRequestType(RequestTypeEnum requestType) {
    this.requestType = requestType;
  }

  public Integration executionOrder(Integer executionOrder) {
    this.executionOrder = executionOrder;
    return this;
  }

  /**
   * Get executionOrder
   * 
   * @return executionOrder
   **/
  @ApiModelProperty(value = "")
  public Integer getExecutionOrder() {
    return executionOrder;
  }

  public void setExecutionOrder(Integer executionOrder) {
    this.executionOrder = executionOrder;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Integration integration = (Integration) o;
    return Objects.equals(this.integrationId, integration.integrationId)
        && Objects.equals(this.folder, integration.folder)
        && Objects.equals(this.integrationAlias, integration.integrationAlias)
        && Objects.equals(this.name, integration.name)
        && Objects.equals(this.integrationType, integration.integrationType)
        && Objects.equals(this.integrationConfig, integration.integrationConfig)
        && Objects.equals(this.applicationId, integration.applicationId)
        && Objects.equals(this.enabled, integration.enabled) && Objects.equals(this.basicToken, integration.basicToken)
        && Objects.equals(this.modDate, integration.modDate) && Objects.equals(this.modName, integration.modName)
        && Objects.equals(this.url, integration.url) && Objects.equals(this.requestType, integration.requestType)
        && Objects.equals(this.executionOrder, integration.executionOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(integrationId, folder, integrationAlias, name, integrationType, integrationConfig,
        applicationId, enabled, basicToken, modDate, modName, url, requestType, executionOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Integration {\n");

    sb.append("    integrationId: ").append(toIndentedString(integrationId)).append("\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    integrationAlias: ").append(toIndentedString(integrationAlias)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    integrationType: ").append(toIndentedString(integrationType)).append("\n");
    sb.append("    integrationConfig: ").append(toIndentedString(integrationConfig)).append("\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    basicToken: ").append(toIndentedString(basicToken)).append("\n");
    sb.append("    modDate: ").append(toIndentedString(modDate)).append("\n");
    sb.append("    modName: ").append(toIndentedString(modName)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    executionOrder: ").append(toIndentedString(executionOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

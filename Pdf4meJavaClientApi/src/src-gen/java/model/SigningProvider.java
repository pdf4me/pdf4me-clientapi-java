/*
 * Pdf4me
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Define Stamp to place on Document
 */
@ApiModel(description = "Define Stamp to place on Document")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-25T12:07:57.015+01:00")
public class SigningProvider {
  /**
   * Gets or Sets signingProviderType
   */
  @JsonAdapter(SigningProviderTypeEnum.Adapter.class)
  public enum SigningProviderTypeEnum {
    UNDEF("undef"),
    
    QUOVADISSEALSIGN("quoVadisSealsign"),
    
    SWISSSIGNSUISSEID("swissSignSuisseID"),
    
    SWISSCOMSIGNING("swisscomSigning");

    private String value;

    SigningProviderTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SigningProviderTypeEnum fromValue(String text) {
      for (SigningProviderTypeEnum b : SigningProviderTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SigningProviderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SigningProviderTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SigningProviderTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SigningProviderTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("signingProviderType")
  private SigningProviderTypeEnum signingProviderType = null;

  @SerializedName("identity")
  private String identity = null;

  @SerializedName("profile")
  private String profile = null;

  @SerializedName("secret")
  private String secret = null;

  @SerializedName("clientId")
  private String clientId = null;

  @SerializedName("pin")
  private String pin = null;

  @SerializedName("serviceUrl")
  private String serviceUrl = null;

  public SigningProvider signingProviderType(SigningProviderTypeEnum signingProviderType) {
    this.signingProviderType = signingProviderType;
    return this;
  }

   /**
   * Get signingProviderType
   * @return signingProviderType
  **/
  @ApiModelProperty(value = "")
  public SigningProviderTypeEnum getSigningProviderType() {
    return signingProviderType;
  }

  public void setSigningProviderType(SigningProviderTypeEnum signingProviderType) {
    this.signingProviderType = signingProviderType;
  }

  public SigningProvider identity(String identity) {
    this.identity = identity;
    return this;
  }

   /**
   * Get identity
   * @return identity
  **/
  @ApiModelProperty(value = "")
  public String getIdentity() {
    return identity;
  }

  public void setIdentity(String identity) {
    this.identity = identity;
  }

  public SigningProvider profile(String profile) {
    this.profile = profile;
    return this;
  }

   /**
   * Get profile
   * @return profile
  **/
  @ApiModelProperty(value = "")
  public String getProfile() {
    return profile;
  }

  public void setProfile(String profile) {
    this.profile = profile;
  }

  public SigningProvider secret(String secret) {
    this.secret = secret;
    return this;
  }

   /**
   * Get secret
   * @return secret
  **/
  @ApiModelProperty(value = "")
  public String getSecret() {
    return secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }

  public SigningProvider clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * Get clientId
   * @return clientId
  **/
  @ApiModelProperty(value = "")
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }

  public SigningProvider pin(String pin) {
    this.pin = pin;
    return this;
  }

   /**
   * Get pin
   * @return pin
  **/
  @ApiModelProperty(value = "")
  public String getPin() {
    return pin;
  }

  public void setPin(String pin) {
    this.pin = pin;
  }

  public SigningProvider serviceUrl(String serviceUrl) {
    this.serviceUrl = serviceUrl;
    return this;
  }

   /**
   * Get serviceUrl
   * @return serviceUrl
  **/
  @ApiModelProperty(value = "")
  public String getServiceUrl() {
    return serviceUrl;
  }

  public void setServiceUrl(String serviceUrl) {
    this.serviceUrl = serviceUrl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SigningProvider signingProvider = (SigningProvider) o;
    return Objects.equals(this.signingProviderType, signingProvider.signingProviderType) &&
        Objects.equals(this.identity, signingProvider.identity) &&
        Objects.equals(this.profile, signingProvider.profile) &&
        Objects.equals(this.secret, signingProvider.secret) &&
        Objects.equals(this.clientId, signingProvider.clientId) &&
        Objects.equals(this.pin, signingProvider.pin) &&
        Objects.equals(this.serviceUrl, signingProvider.serviceUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signingProviderType, identity, profile, secret, clientId, pin, serviceUrl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SigningProvider {\n");
    
    sb.append("    signingProviderType: ").append(toIndentedString(signingProviderType)).append("\n");
    sb.append("    identity: ").append(toIndentedString(identity)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    pin: ").append(toIndentedString(pin)).append("\n");
    sb.append("    serviceUrl: ").append(toIndentedString(serviceUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * Pdf4me
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * ReadBarcodeAction
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-25T12:07:57.015+01:00")
public class ReadBarcodeAction {
  /**
   * Gets or Sets barcodeTypes
   */
  @JsonAdapter(BarcodeTypesEnum.Adapter.class)
  public enum BarcodeTypesEnum {
    ALL("all"),
    
    UNKNOWN("unknown"),
    
    CODE11("code11"),
    
    CODE39("code39"),
    
    CODE93("code93"),
    
    CODE128("code128"),
    
    CODABAR("codabar"),
    
    INTER2OF5("inter2of5"),
    
    PATCHCODE("patchCode"),
    
    EAN8("ean8"),
    
    UPCE("upce"),
    
    EAN13("ean13"),
    
    UPCA("upca"),
    
    PLUS2("plus2"),
    
    PLUS5("plus5"),
    
    PDF417("pdf417"),
    
    DATAMATRIX("dataMatrix"),
    
    QRCODE("qrCode"),
    
    POSTNET("postnet"),
    
    PLANET("planet"),
    
    RM4SCC("rm4SCC"),
    
    AUSTRALIAPOST("australiaPost"),
    
    INTELLIGENTMAIL("intelligentMail"),
    
    CODE39EXTENDED("code39Extended"),
    
    MICROQRCODE("microQRCode"),
    
    ALL_2D("all_2D"),
    
    PHARMACODE("pharmaCode"),
    
    UCC128("ucc128"),
    
    RSS14("rss14"),
    
    RSSLIMITED("rssLimited"),
    
    RSSEXPANDED("rssExpanded"),
    
    ALL_1D("all_1D");

    private String value;

    BarcodeTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BarcodeTypesEnum fromValue(String text) {
      for (BarcodeTypesEnum b : BarcodeTypesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BarcodeTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BarcodeTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BarcodeTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BarcodeTypesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("barcodeTypes")
  private List<BarcodeTypesEnum> barcodeTypes = null;

  /**
   * Gets or Sets barcodeOrientation
   */
  @JsonAdapter(BarcodeOrientationEnum.Adapter.class)
  public enum BarcodeOrientationEnum {
    UNKNOWN("unknown"),
    
    LEFTTORIGHT("leftToRight"),
    
    RIGHTTOLEFT("rightToLeft"),
    
    TOPTOBOTTOM("topToBottom"),
    
    BOTTOMTOTOP("bottomToTop"),
    
    ALL("all");

    private String value;

    BarcodeOrientationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BarcodeOrientationEnum fromValue(String text) {
      for (BarcodeOrientationEnum b : BarcodeOrientationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BarcodeOrientationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BarcodeOrientationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BarcodeOrientationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BarcodeOrientationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("barcodeOrientation")
  private List<BarcodeOrientationEnum> barcodeOrientation = null;

  @SerializedName("barcodesToRead")
  private Integer barcodesToRead = null;

  @SerializedName("scanInterval")
  private Integer scanInterval = null;

  /**
   * Gets or Sets quietZoneSize
   */
  @JsonAdapter(QuietZoneSizeEnum.Adapter.class)
  public enum QuietZoneSizeEnum {
    EXTRASMALL("extraSmall"),
    
    SMALL("small"),
    
    NORMAL("normal"),
    
    LARGE("large");

    private String value;

    QuietZoneSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuietZoneSizeEnum fromValue(String text) {
      for (QuietZoneSizeEnum b : QuietZoneSizeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<QuietZoneSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuietZoneSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QuietZoneSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return QuietZoneSizeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("quietZoneSize")
  private QuietZoneSizeEnum quietZoneSize = null;

  /**
   * Gets or Sets pdfReadingType
   */
  @JsonAdapter(PdfReadingTypeEnum.Adapter.class)
  public enum PdfReadingTypeEnum {
    RENDER("render"),
    
    IMAGES("images");

    private String value;

    PdfReadingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PdfReadingTypeEnum fromValue(String text) {
      for (PdfReadingTypeEnum b : PdfReadingTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PdfReadingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PdfReadingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PdfReadingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PdfReadingTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("pdfReadingType")
  private PdfReadingTypeEnum pdfReadingType = null;

  @SerializedName("pdfRenderDPI")
  private Integer pdfRenderDPI = null;

  /**
   * Gets or Sets thresholdMode
   */
  @JsonAdapter(ThresholdModeEnum.Adapter.class)
  public enum ThresholdModeEnum {
    AUTOMATIC("automatic"),
    
    FIXED("fixed"),
    
    MULTIPLE("multiple"),
    
    ADAPTIVE("adaptive");

    private String value;

    ThresholdModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThresholdModeEnum fromValue(String text) {
      for (ThresholdModeEnum b : ThresholdModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ThresholdModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThresholdModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThresholdModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ThresholdModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("thresholdMode")
  private ThresholdModeEnum thresholdMode = null;

  @SerializedName("thresholdCount")
  private Integer thresholdCount = null;

  @SerializedName("thresholdStep")
  private Integer thresholdStep = null;

  @SerializedName("scanPage")
  private Integer scanPage = null;

  @SerializedName("i2of5Checksum")
  private Boolean i2of5Checksum = null;

  @SerializedName("code11Checksum")
  private Boolean code11Checksum = null;

  @SerializedName("code39Checksum")
  private Boolean code39Checksum = null;

  @SerializedName("code93Checksum")
  private Boolean code93Checksum = null;

  @SerializedName("imageDespeckle")
  private Integer imageDespeckle = null;

  @SerializedName("imageErode")
  private Integer imageErode = null;

  @SerializedName("imageDilate")
  private Integer imageDilate = null;

  @SerializedName("imageSharp")
  private Integer imageSharp = null;

  @SerializedName("imageInvert")
  private Integer imageInvert = null;

  public ReadBarcodeAction barcodeTypes(List<BarcodeTypesEnum> barcodeTypes) {
    this.barcodeTypes = barcodeTypes;
    return this;
  }

  public ReadBarcodeAction addBarcodeTypesItem(BarcodeTypesEnum barcodeTypesItem) {
    if (this.barcodeTypes == null) {
      this.barcodeTypes = new ArrayList<BarcodeTypesEnum>();
    }
    this.barcodeTypes.add(barcodeTypesItem);
    return this;
  }

   /**
   * Get barcodeTypes
   * @return barcodeTypes
  **/
  @ApiModelProperty(value = "")
  public List<BarcodeTypesEnum> getBarcodeTypes() {
    return barcodeTypes;
  }

  public void setBarcodeTypes(List<BarcodeTypesEnum> barcodeTypes) {
    this.barcodeTypes = barcodeTypes;
  }

  public ReadBarcodeAction barcodeOrientation(List<BarcodeOrientationEnum> barcodeOrientation) {
    this.barcodeOrientation = barcodeOrientation;
    return this;
  }

  public ReadBarcodeAction addBarcodeOrientationItem(BarcodeOrientationEnum barcodeOrientationItem) {
    if (this.barcodeOrientation == null) {
      this.barcodeOrientation = new ArrayList<BarcodeOrientationEnum>();
    }
    this.barcodeOrientation.add(barcodeOrientationItem);
    return this;
  }

   /**
   * Get barcodeOrientation
   * @return barcodeOrientation
  **/
  @ApiModelProperty(value = "")
  public List<BarcodeOrientationEnum> getBarcodeOrientation() {
    return barcodeOrientation;
  }

  public void setBarcodeOrientation(List<BarcodeOrientationEnum> barcodeOrientation) {
    this.barcodeOrientation = barcodeOrientation;
  }

  public ReadBarcodeAction barcodesToRead(Integer barcodesToRead) {
    this.barcodesToRead = barcodesToRead;
    return this;
  }

   /**
   * Get barcodesToRead
   * @return barcodesToRead
  **/
  @ApiModelProperty(value = "")
  public Integer getBarcodesToRead() {
    return barcodesToRead;
  }

  public void setBarcodesToRead(Integer barcodesToRead) {
    this.barcodesToRead = barcodesToRead;
  }

  public ReadBarcodeAction scanInterval(Integer scanInterval) {
    this.scanInterval = scanInterval;
    return this;
  }

   /**
   * Get scanInterval
   * @return scanInterval
  **/
  @ApiModelProperty(value = "")
  public Integer getScanInterval() {
    return scanInterval;
  }

  public void setScanInterval(Integer scanInterval) {
    this.scanInterval = scanInterval;
  }

  public ReadBarcodeAction quietZoneSize(QuietZoneSizeEnum quietZoneSize) {
    this.quietZoneSize = quietZoneSize;
    return this;
  }

   /**
   * Get quietZoneSize
   * @return quietZoneSize
  **/
  @ApiModelProperty(value = "")
  public QuietZoneSizeEnum getQuietZoneSize() {
    return quietZoneSize;
  }

  public void setQuietZoneSize(QuietZoneSizeEnum quietZoneSize) {
    this.quietZoneSize = quietZoneSize;
  }

  public ReadBarcodeAction pdfReadingType(PdfReadingTypeEnum pdfReadingType) {
    this.pdfReadingType = pdfReadingType;
    return this;
  }

   /**
   * Get pdfReadingType
   * @return pdfReadingType
  **/
  @ApiModelProperty(value = "")
  public PdfReadingTypeEnum getPdfReadingType() {
    return pdfReadingType;
  }

  public void setPdfReadingType(PdfReadingTypeEnum pdfReadingType) {
    this.pdfReadingType = pdfReadingType;
  }

  public ReadBarcodeAction pdfRenderDPI(Integer pdfRenderDPI) {
    this.pdfRenderDPI = pdfRenderDPI;
    return this;
  }

   /**
   * Get pdfRenderDPI
   * @return pdfRenderDPI
  **/
  @ApiModelProperty(value = "")
  public Integer getPdfRenderDPI() {
    return pdfRenderDPI;
  }

  public void setPdfRenderDPI(Integer pdfRenderDPI) {
    this.pdfRenderDPI = pdfRenderDPI;
  }

  public ReadBarcodeAction thresholdMode(ThresholdModeEnum thresholdMode) {
    this.thresholdMode = thresholdMode;
    return this;
  }

   /**
   * Get thresholdMode
   * @return thresholdMode
  **/
  @ApiModelProperty(value = "")
  public ThresholdModeEnum getThresholdMode() {
    return thresholdMode;
  }

  public void setThresholdMode(ThresholdModeEnum thresholdMode) {
    this.thresholdMode = thresholdMode;
  }

  public ReadBarcodeAction thresholdCount(Integer thresholdCount) {
    this.thresholdCount = thresholdCount;
    return this;
  }

   /**
   * Get thresholdCount
   * @return thresholdCount
  **/
  @ApiModelProperty(value = "")
  public Integer getThresholdCount() {
    return thresholdCount;
  }

  public void setThresholdCount(Integer thresholdCount) {
    this.thresholdCount = thresholdCount;
  }

  public ReadBarcodeAction thresholdStep(Integer thresholdStep) {
    this.thresholdStep = thresholdStep;
    return this;
  }

   /**
   * Get thresholdStep
   * @return thresholdStep
  **/
  @ApiModelProperty(value = "")
  public Integer getThresholdStep() {
    return thresholdStep;
  }

  public void setThresholdStep(Integer thresholdStep) {
    this.thresholdStep = thresholdStep;
  }

  public ReadBarcodeAction scanPage(Integer scanPage) {
    this.scanPage = scanPage;
    return this;
  }

   /**
   * Get scanPage
   * @return scanPage
  **/
  @ApiModelProperty(value = "")
  public Integer getScanPage() {
    return scanPage;
  }

  public void setScanPage(Integer scanPage) {
    this.scanPage = scanPage;
  }

  public ReadBarcodeAction i2of5Checksum(Boolean i2of5Checksum) {
    this.i2of5Checksum = i2of5Checksum;
    return this;
  }

   /**
   * Get i2of5Checksum
   * @return i2of5Checksum
  **/
  @ApiModelProperty(value = "")
  public Boolean isI2of5Checksum() {
    return i2of5Checksum;
  }

  public void setI2of5Checksum(Boolean i2of5Checksum) {
    this.i2of5Checksum = i2of5Checksum;
  }

  public ReadBarcodeAction code11Checksum(Boolean code11Checksum) {
    this.code11Checksum = code11Checksum;
    return this;
  }

   /**
   * Get code11Checksum
   * @return code11Checksum
  **/
  @ApiModelProperty(value = "")
  public Boolean isCode11Checksum() {
    return code11Checksum;
  }

  public void setCode11Checksum(Boolean code11Checksum) {
    this.code11Checksum = code11Checksum;
  }

  public ReadBarcodeAction code39Checksum(Boolean code39Checksum) {
    this.code39Checksum = code39Checksum;
    return this;
  }

   /**
   * Get code39Checksum
   * @return code39Checksum
  **/
  @ApiModelProperty(value = "")
  public Boolean isCode39Checksum() {
    return code39Checksum;
  }

  public void setCode39Checksum(Boolean code39Checksum) {
    this.code39Checksum = code39Checksum;
  }

  public ReadBarcodeAction code93Checksum(Boolean code93Checksum) {
    this.code93Checksum = code93Checksum;
    return this;
  }

   /**
   * Get code93Checksum
   * @return code93Checksum
  **/
  @ApiModelProperty(value = "")
  public Boolean isCode93Checksum() {
    return code93Checksum;
  }

  public void setCode93Checksum(Boolean code93Checksum) {
    this.code93Checksum = code93Checksum;
  }

  public ReadBarcodeAction imageDespeckle(Integer imageDespeckle) {
    this.imageDespeckle = imageDespeckle;
    return this;
  }

   /**
   * Get imageDespeckle
   * @return imageDespeckle
  **/
  @ApiModelProperty(value = "")
  public Integer getImageDespeckle() {
    return imageDespeckle;
  }

  public void setImageDespeckle(Integer imageDespeckle) {
    this.imageDespeckle = imageDespeckle;
  }

  public ReadBarcodeAction imageErode(Integer imageErode) {
    this.imageErode = imageErode;
    return this;
  }

   /**
   * Get imageErode
   * @return imageErode
  **/
  @ApiModelProperty(value = "")
  public Integer getImageErode() {
    return imageErode;
  }

  public void setImageErode(Integer imageErode) {
    this.imageErode = imageErode;
  }

  public ReadBarcodeAction imageDilate(Integer imageDilate) {
    this.imageDilate = imageDilate;
    return this;
  }

   /**
   * Get imageDilate
   * @return imageDilate
  **/
  @ApiModelProperty(value = "")
  public Integer getImageDilate() {
    return imageDilate;
  }

  public void setImageDilate(Integer imageDilate) {
    this.imageDilate = imageDilate;
  }

  public ReadBarcodeAction imageSharp(Integer imageSharp) {
    this.imageSharp = imageSharp;
    return this;
  }

   /**
   * Get imageSharp
   * @return imageSharp
  **/
  @ApiModelProperty(value = "")
  public Integer getImageSharp() {
    return imageSharp;
  }

  public void setImageSharp(Integer imageSharp) {
    this.imageSharp = imageSharp;
  }

  public ReadBarcodeAction imageInvert(Integer imageInvert) {
    this.imageInvert = imageInvert;
    return this;
  }

   /**
   * Get imageInvert
   * @return imageInvert
  **/
  @ApiModelProperty(value = "")
  public Integer getImageInvert() {
    return imageInvert;
  }

  public void setImageInvert(Integer imageInvert) {
    this.imageInvert = imageInvert;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReadBarcodeAction readBarcodeAction = (ReadBarcodeAction) o;
    return Objects.equals(this.barcodeTypes, readBarcodeAction.barcodeTypes) &&
        Objects.equals(this.barcodeOrientation, readBarcodeAction.barcodeOrientation) &&
        Objects.equals(this.barcodesToRead, readBarcodeAction.barcodesToRead) &&
        Objects.equals(this.scanInterval, readBarcodeAction.scanInterval) &&
        Objects.equals(this.quietZoneSize, readBarcodeAction.quietZoneSize) &&
        Objects.equals(this.pdfReadingType, readBarcodeAction.pdfReadingType) &&
        Objects.equals(this.pdfRenderDPI, readBarcodeAction.pdfRenderDPI) &&
        Objects.equals(this.thresholdMode, readBarcodeAction.thresholdMode) &&
        Objects.equals(this.thresholdCount, readBarcodeAction.thresholdCount) &&
        Objects.equals(this.thresholdStep, readBarcodeAction.thresholdStep) &&
        Objects.equals(this.scanPage, readBarcodeAction.scanPage) &&
        Objects.equals(this.i2of5Checksum, readBarcodeAction.i2of5Checksum) &&
        Objects.equals(this.code11Checksum, readBarcodeAction.code11Checksum) &&
        Objects.equals(this.code39Checksum, readBarcodeAction.code39Checksum) &&
        Objects.equals(this.code93Checksum, readBarcodeAction.code93Checksum) &&
        Objects.equals(this.imageDespeckle, readBarcodeAction.imageDespeckle) &&
        Objects.equals(this.imageErode, readBarcodeAction.imageErode) &&
        Objects.equals(this.imageDilate, readBarcodeAction.imageDilate) &&
        Objects.equals(this.imageSharp, readBarcodeAction.imageSharp) &&
        Objects.equals(this.imageInvert, readBarcodeAction.imageInvert);
  }

  @Override
  public int hashCode() {
    return Objects.hash(barcodeTypes, barcodeOrientation, barcodesToRead, scanInterval, quietZoneSize, pdfReadingType, pdfRenderDPI, thresholdMode, thresholdCount, thresholdStep, scanPage, i2of5Checksum, code11Checksum, code39Checksum, code93Checksum, imageDespeckle, imageErode, imageDilate, imageSharp, imageInvert);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReadBarcodeAction {\n");
    
    sb.append("    barcodeTypes: ").append(toIndentedString(barcodeTypes)).append("\n");
    sb.append("    barcodeOrientation: ").append(toIndentedString(barcodeOrientation)).append("\n");
    sb.append("    barcodesToRead: ").append(toIndentedString(barcodesToRead)).append("\n");
    sb.append("    scanInterval: ").append(toIndentedString(scanInterval)).append("\n");
    sb.append("    quietZoneSize: ").append(toIndentedString(quietZoneSize)).append("\n");
    sb.append("    pdfReadingType: ").append(toIndentedString(pdfReadingType)).append("\n");
    sb.append("    pdfRenderDPI: ").append(toIndentedString(pdfRenderDPI)).append("\n");
    sb.append("    thresholdMode: ").append(toIndentedString(thresholdMode)).append("\n");
    sb.append("    thresholdCount: ").append(toIndentedString(thresholdCount)).append("\n");
    sb.append("    thresholdStep: ").append(toIndentedString(thresholdStep)).append("\n");
    sb.append("    scanPage: ").append(toIndentedString(scanPage)).append("\n");
    sb.append("    i2of5Checksum: ").append(toIndentedString(i2of5Checksum)).append("\n");
    sb.append("    code11Checksum: ").append(toIndentedString(code11Checksum)).append("\n");
    sb.append("    code39Checksum: ").append(toIndentedString(code39Checksum)).append("\n");
    sb.append("    code93Checksum: ").append(toIndentedString(code93Checksum)).append("\n");
    sb.append("    imageDespeckle: ").append(toIndentedString(imageDespeckle)).append("\n");
    sb.append("    imageErode: ").append(toIndentedString(imageErode)).append("\n");
    sb.append("    imageDilate: ").append(toIndentedString(imageDilate)).append("\n");
    sb.append("    imageSharp: ").append(toIndentedString(imageSharp)).append("\n");
    sb.append("    imageInvert: ").append(toIndentedString(imageInvert)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * Pdf4me
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

/**
 * ConvertFromPdfAction
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-07-02T11:08:16.145Z")
public class ConvertFromPdfAction {
  /**
   * Gets or Sets outputFormat
   */
  @JsonAdapter(OutputFormatEnum.Adapter.class)
  public enum OutputFormatEnum {
    NONE("none"),

    DOCX("docX"),

    EXCEL("excel"),

    PPTX("pptx"),

    PDFOCR("pdfOcr"),

    TEXTOCR("textOcr"),

    EPUB("epub"),

    MOBI("mobi");

    private String value;

    OutputFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutputFormatEnum fromValue(String text) {
      for (OutputFormatEnum b : OutputFormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OutputFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutputFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutputFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OutputFormatEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("outputFormat")
  private OutputFormatEnum outputFormat = null;

  /**
   * Gets or Sets qualityType
   */
  @JsonAdapter(QualityTypeEnum.Adapter.class)
  public enum QualityTypeEnum {
    DRAFT("draft"),

    HIGH("high");

    private String value;

    QualityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QualityTypeEnum fromValue(String text) {
      for (QualityTypeEnum b : QualityTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<QualityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QualityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QualityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return QualityTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("qualityType")
  private QualityTypeEnum qualityType = null;

  @SerializedName("singlePage")
  private Boolean singlePage = null;

  @SerializedName("docAuthor")
  private String docAuthor = null;

  @SerializedName("docTitle")
  private String docTitle = null;

  @SerializedName("coverThumbnail")
  private byte[] coverThumbnail = null;

  @SerializedName("actionId")
  private UUID actionId = null;

  public ConvertFromPdfAction outputFormat(OutputFormatEnum outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

  /**
   * Get outputFormat
   * 
   * @return outputFormat
   **/
  @ApiModelProperty(value = "")
  public OutputFormatEnum getOutputFormat() {
    return outputFormat;
  }

  public void setOutputFormat(OutputFormatEnum outputFormat) {
    this.outputFormat = outputFormat;
  }

  public ConvertFromPdfAction qualityType(QualityTypeEnum qualityType) {
    this.qualityType = qualityType;
    return this;
  }

  /**
   * Get qualityType
   * 
   * @return qualityType
   **/
  @ApiModelProperty(value = "")
  public QualityTypeEnum getQualityType() {
    return qualityType;
  }

  public void setQualityType(QualityTypeEnum qualityType) {
    this.qualityType = qualityType;
  }

  public ConvertFromPdfAction singlePage(Boolean singlePage) {
    this.singlePage = singlePage;
    return this;
  }

  /**
   * Get singlePage
   * 
   * @return singlePage
   **/
  @ApiModelProperty(value = "")
  public Boolean isSinglePage() {
    return singlePage;
  }

  public void setSinglePage(Boolean singlePage) {
    this.singlePage = singlePage;
  }

  public ConvertFromPdfAction docAuthor(String docAuthor) {
    this.docAuthor = docAuthor;
    return this;
  }

  /**
   * Get docAuthor
   * 
   * @return docAuthor
   **/
  @ApiModelProperty(value = "")
  public String getDocAuthor() {
    return docAuthor;
  }

  public void setDocAuthor(String docAuthor) {
    this.docAuthor = docAuthor;
  }

  public ConvertFromPdfAction docTitle(String docTitle) {
    this.docTitle = docTitle;
    return this;
  }

  /**
   * Get docTitle
   * 
   * @return docTitle
   **/
  @ApiModelProperty(value = "")
  public String getDocTitle() {
    return docTitle;
  }

  public void setDocTitle(String docTitle) {
    this.docTitle = docTitle;
  }

  public ConvertFromPdfAction coverThumbnail(byte[] coverThumbnail) {
    this.coverThumbnail = coverThumbnail;
    return this;
  }

  /**
   * Get coverThumbnail
   * 
   * @return coverThumbnail
   **/
  @ApiModelProperty(value = "")
  public byte[] getCoverThumbnail() {
    return coverThumbnail;
  }

  public void setCoverThumbnail(byte[] coverThumbnail) {
    this.coverThumbnail = coverThumbnail;
  }

  public ConvertFromPdfAction actionId(UUID actionId) {
    this.actionId = actionId;
    return this;
  }

  /**
   * Get actionId
   * 
   * @return actionId
   **/
  @ApiModelProperty(value = "")
  public UUID getActionId() {
    return actionId;
  }

  public void setActionId(UUID actionId) {
    this.actionId = actionId;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConvertFromPdfAction convertFromPdfAction = (ConvertFromPdfAction) o;
    return Objects.equals(this.outputFormat, convertFromPdfAction.outputFormat)
        && Objects.equals(this.qualityType, convertFromPdfAction.qualityType)
        && Objects.equals(this.singlePage, convertFromPdfAction.singlePage)
        && Objects.equals(this.docAuthor, convertFromPdfAction.docAuthor)
        && Objects.equals(this.docTitle, convertFromPdfAction.docTitle)
        && Arrays.equals(this.coverThumbnail, convertFromPdfAction.coverThumbnail)
        && Objects.equals(this.actionId, convertFromPdfAction.actionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(outputFormat, qualityType, singlePage, docAuthor, docTitle, Arrays.hashCode(coverThumbnail),
        actionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConvertFromPdfAction {\n");

    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    qualityType: ").append(toIndentedString(qualityType)).append("\n");
    sb.append("    singlePage: ").append(toIndentedString(singlePage)).append("\n");
    sb.append("    docAuthor: ").append(toIndentedString(docAuthor)).append("\n");
    sb.append("    docTitle: ").append(toIndentedString(docTitle)).append("\n");
    sb.append("    coverThumbnail: ").append(toIndentedString(coverThumbnail)).append("\n");
    sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

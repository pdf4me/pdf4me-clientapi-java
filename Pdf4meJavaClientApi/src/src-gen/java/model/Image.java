/*
 * DmsApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import model.Rectangle;
import model.Rotate;
import model.Transform;
import model.Translate;

/**
 * Image
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-12-01T18:17:38.351+01:00")
public class Image {
  @SerializedName("rectangle")
  private Rectangle rectangle = null;

  @SerializedName("imageData")
  private byte[] imageData = null;

  @SerializedName("imageType")
  private String imageType = null;

  @SerializedName("fileName")
  private String fileName = null;

  /**
   * Gets or Sets compression
   */
  @JsonAdapter(CompressionEnum.Adapter.class)
  public enum CompressionEnum {
    CCITTFAX("cCITTFax"),
    
    FLATE("flate"),
    
    DCT("dCT");

    private String value;

    CompressionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompressionEnum fromValue(String text) {
      for (CompressionEnum b : CompressionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CompressionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompressionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompressionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CompressionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("compression")
  private CompressionEnum compression = null;

  @SerializedName("rotate")
  private Rotate rotate = null;

  @SerializedName("translate")
  private Translate translate = null;

  @SerializedName("transform")
  private Transform transform = null;

  public Image rectangle(Rectangle rectangle) {
    this.rectangle = rectangle;
    return this;
  }

   /**
   * Get rectangle
   * @return rectangle
  **/
  @ApiModelProperty(value = "")
  public Rectangle getRectangle() {
    return rectangle;
  }

  public void setRectangle(Rectangle rectangle) {
    this.rectangle = rectangle;
  }

  public Image imageData(byte[] imageData) {
    this.imageData = imageData;
    return this;
  }

   /**
   * Get imageData
   * @return imageData
  **/
  @ApiModelProperty(value = "")
  public byte[] getImageData() {
    return imageData;
  }

  public void setImageData(byte[] imageData) {
    this.imageData = imageData;
  }

  public Image imageType(String imageType) {
    this.imageType = imageType;
    return this;
  }

   /**
   * Get imageType
   * @return imageType
  **/
  @ApiModelProperty(value = "")
  public String getImageType() {
    return imageType;
  }

  public void setImageType(String imageType) {
    this.imageType = imageType;
  }

  public Image fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * Get fileName
   * @return fileName
  **/
  @ApiModelProperty(value = "")
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public Image compression(CompressionEnum compression) {
    this.compression = compression;
    return this;
  }

   /**
   * Get compression
   * @return compression
  **/
  @ApiModelProperty(value = "")
  public CompressionEnum getCompression() {
    return compression;
  }

  public void setCompression(CompressionEnum compression) {
    this.compression = compression;
  }

  public Image rotate(Rotate rotate) {
    this.rotate = rotate;
    return this;
  }

   /**
   * Get rotate
   * @return rotate
  **/
  @ApiModelProperty(value = "")
  public Rotate getRotate() {
    return rotate;
  }

  public void setRotate(Rotate rotate) {
    this.rotate = rotate;
  }

  public Image translate(Translate translate) {
    this.translate = translate;
    return this;
  }

   /**
   * Get translate
   * @return translate
  **/
  @ApiModelProperty(value = "")
  public Translate getTranslate() {
    return translate;
  }

  public void setTranslate(Translate translate) {
    this.translate = translate;
  }

  public Image transform(Transform transform) {
    this.transform = transform;
    return this;
  }

   /**
   * Get transform
   * @return transform
  **/
  @ApiModelProperty(value = "")
  public Transform getTransform() {
    return transform;
  }

  public void setTransform(Transform transform) {
    this.transform = transform;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Image image = (Image) o;
    return Objects.equals(this.rectangle, image.rectangle) &&
        Objects.equals(this.imageData, image.imageData) &&
        Objects.equals(this.imageType, image.imageType) &&
        Objects.equals(this.fileName, image.fileName) &&
        Objects.equals(this.compression, image.compression) &&
        Objects.equals(this.rotate, image.rotate) &&
        Objects.equals(this.translate, image.translate) &&
        Objects.equals(this.transform, image.transform);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rectangle, imageData, imageType, fileName, compression, rotate, translate, transform);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Image {\n");
    
    sb.append("    rectangle: ").append(toIndentedString(rectangle)).append("\n");
    sb.append("    imageData: ").append(toIndentedString(imageData)).append("\n");
    sb.append("    imageType: ").append(toIndentedString(imageType)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    compression: ").append(toIndentedString(compression)).append("\n");
    sb.append("    rotate: ").append(toIndentedString(rotate)).append("\n");
    sb.append("    translate: ").append(toIndentedString(translate)).append("\n");
    sb.append("    transform: ").append(toIndentedString(transform)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


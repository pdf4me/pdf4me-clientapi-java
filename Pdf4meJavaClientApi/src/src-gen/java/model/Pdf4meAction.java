/*
 * Pdf4me
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import model.KeyValuePairStringObject;

/**
 * Pdf4meAction
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-07-02T11:08:16.145Z")
public class Pdf4meAction {
  @SerializedName("actionId")
  private UUID actionId = null;

  /**
   * Gets or Sets actionType
   */
  @JsonAdapter(ActionTypeEnum.Adapter.class)
  public enum ActionTypeEnum {
    UNDEF("undef"),

    USER("user"),

    OPTIMIZE("optimize"),

    PDFA("pdfA"),

    OCR("ocr"),

    CONVERTER("converter"),

    CONVERTTOPDF("convertToPdf"),

    STAMP("stamp"),

    SPLIT("split"),

    MERGE("merge"),

    EXTRACTRESOURCES("extractResources"),

    THUMBNAIL("thumbnail"),

    IMAGE("image"),

    EXTRACT("extract"),

    READBARCODE("readBarcode"),

    CREATEBARCODE("createBarcode"),

    PROTECT("protect"),

    REPAIR("repair"),

    ROTATE("rotate"),

    SIGN("sign"),

    PRODUCE("produce"),

    CONVERTFROMPDF("convertFromPdf"),

    SPLITBYBARCODE("splitByBarcode"),

    JOBFLOW("jobFlow"),

    SWISSQRCODE("swissQRCode"),

    ADDBARCODE("addBarcode"),

    PREPAREFORPRINT("prepareForPrint"),

    URLTOPDF("urlToPdf"),

    HTMLTOPDF("htmlToPdf"),

    MDTOPDF("mdToPdf");

    private String value;

    ActionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionTypeEnum fromValue(String text) {
      for (ActionTypeEnum b : ActionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ActionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ActionTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("actionType")
  private ActionTypeEnum actionType = null;

  @SerializedName("userAction")
  private String userAction = null;

  @SerializedName("actionConfig")
  private String actionConfig = null;

  @SerializedName("actionProperties")
  private List<KeyValuePairStringObject> actionProperties = null;

  public Pdf4meAction actionId(UUID actionId) {
    this.actionId = actionId;
    return this;
  }

  /**
   * Get actionId
   * 
   * @return actionId
   **/
  @ApiModelProperty(value = "")
  public UUID getActionId() {
    return actionId;
  }

  public void setActionId(UUID actionId) {
    this.actionId = actionId;
  }

  public Pdf4meAction actionType(ActionTypeEnum actionType) {
    this.actionType = actionType;
    return this;
  }

  /**
   * Get actionType
   * 
   * @return actionType
   **/
  @ApiModelProperty(value = "")
  public ActionTypeEnum getActionType() {
    return actionType;
  }

  public void setActionType(ActionTypeEnum actionType) {
    this.actionType = actionType;
  }

  public Pdf4meAction userAction(String userAction) {
    this.userAction = userAction;
    return this;
  }

  /**
   * Get userAction
   * 
   * @return userAction
   **/
  @ApiModelProperty(value = "")
  public String getUserAction() {
    return userAction;
  }

  public void setUserAction(String userAction) {
    this.userAction = userAction;
  }

  public Pdf4meAction actionConfig(String actionConfig) {
    this.actionConfig = actionConfig;
    return this;
  }

  /**
   * Get actionConfig
   * 
   * @return actionConfig
   **/
  @ApiModelProperty(value = "")
  public String getActionConfig() {
    return actionConfig;
  }

  public void setActionConfig(String actionConfig) {
    this.actionConfig = actionConfig;
  }

  public Pdf4meAction actionProperties(List<KeyValuePairStringObject> actionProperties) {
    this.actionProperties = actionProperties;
    return this;
  }

  public Pdf4meAction addActionPropertiesItem(KeyValuePairStringObject actionPropertiesItem) {
    if (this.actionProperties == null) {
      this.actionProperties = new ArrayList<KeyValuePairStringObject>();
    }
    this.actionProperties.add(actionPropertiesItem);
    return this;
  }

  /**
   * Get actionProperties
   * 
   * @return actionProperties
   **/
  @ApiModelProperty(value = "")
  public List<KeyValuePairStringObject> getActionProperties() {
    return actionProperties;
  }

  public void setActionProperties(List<KeyValuePairStringObject> actionProperties) {
    this.actionProperties = actionProperties;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pdf4meAction pdf4meAction = (Pdf4meAction) o;
    return Objects.equals(this.actionId, pdf4meAction.actionId)
        && Objects.equals(this.actionType, pdf4meAction.actionType)
        && Objects.equals(this.userAction, pdf4meAction.userAction)
        && Objects.equals(this.actionConfig, pdf4meAction.actionConfig)
        && Objects.equals(this.actionProperties, pdf4meAction.actionProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionId, actionType, userAction, actionConfig, actionProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pdf4meAction {\n");

    sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    userAction: ").append(toIndentedString(userAction)).append("\n");
    sb.append("    actionConfig: ").append(toIndentedString(actionConfig)).append("\n");
    sb.append("    actionProperties: ").append(toIndentedString(actionProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
